<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="3346"><g><title>0x1097567cf (1 samples, 0.03%)</title><rect x="0.0000%" y="677" width="0.0299%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>0x10979bc1b (1 samples, 0.03%)</title><rect x="0.0000%" y="661" width="0.0299%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>0x10979c313 (1 samples, 0.03%)</title><rect x="0.0000%" y="645" width="0.0299%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>0x10979cf8b (1 samples, 0.03%)</title><rect x="0.0000%" y="629" width="0.0299%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>0x109758ac7 (1 samples, 0.03%)</title><rect x="0.0000%" y="613" width="0.0299%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>0x109782d3b (1 samples, 0.03%)</title><rect x="0.0000%" y="597" width="0.0299%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>0x109782f7f (1 samples, 0.03%)</title><rect x="0.0000%" y="581" width="0.0299%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>0x109783515 (1 samples, 0.03%)</title><rect x="0.0000%" y="565" width="0.0299%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>dyld4::ExternallyViewableState::createMinimalInfo(lsl::Allocator&amp;, unsigned long long, char const*, unsigned long long, char const*, DyldSharedCache const*) (1 samples, 0.03%)</title><rect x="0.0299%" y="661" width="0.0299%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2799%" y="671.50"></text></g><g><title>0x19e90e117 (1 samples, 0.03%)</title><rect x="0.0299%" y="645" width="0.0299%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2799%" y="655.50"></text></g><g><title>0x19e90e9af (1 samples, 0.03%)</title><rect x="0.0299%" y="629" width="0.0299%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2799%" y="639.50"></text></g><g><title>0x19e90c733 (1 samples, 0.03%)</title><rect x="0.0299%" y="613" width="0.0299%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2799%" y="623.50"></text></g><g><title>0x19e90c855 (1 samples, 0.03%)</title><rect x="0.0299%" y="597" width="0.0299%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.2799%" y="607.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const (1 samples, 0.03%)</title><rect x="0.0897%" y="613" width="0.0299%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.3397%" y="623.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const::$_0::operator()() const (1 samples, 0.03%)</title><rect x="0.0897%" y="597" width="0.0299%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.3397%" y="607.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0897%" y="581" width="0.0299%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.3397%" y="591.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0897%" y="565" width="0.0299%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.3397%" y="575.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0897%" y="549" width="0.0299%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.3397%" y="559.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0897%" y="533" width="0.0299%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="0.3397%" y="543.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0897%" y="517" width="0.0299%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.3397%" y="527.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0897%" y="501" width="0.0299%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.3397%" y="511.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0897%" y="485" width="0.0299%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="0.3397%" y="495.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0897%" y="469" width="0.0299%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.3397%" y="479.50"></text></g><g><title>dyld4::RuntimeState::notifyObjCInit(dyld4::Loader const*) (1 samples, 0.03%)</title><rect x="0.0897%" y="453" width="0.0299%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.3397%" y="463.50"></text></g><g><title>load_images (1 samples, 0.03%)</title><rect x="0.0897%" y="437" width="0.0299%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="0.3397%" y="447.50"></text></g><g><title>@objc _NSSwiftProcessInfo.arguments.getter (1 samples, 0.03%)</title><rect x="0.0897%" y="421" width="0.0299%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="1"/><text x="0.3397%" y="431.50"></text></g><g><title>_NSSwiftProcessInfo.arguments.getter (1 samples, 0.03%)</title><rect x="0.0897%" y="405" width="0.0299%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="1"/><text x="0.3397%" y="415.50"></text></g><g><title>String._standardizingPath.getter (1 samples, 0.03%)</title><rect x="0.0897%" y="389" width="0.0299%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="1"/><text x="0.3397%" y="399.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.03%)</title><rect x="0.0897%" y="373" width="0.0299%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="1"/><text x="0.3397%" y="383.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.03%)</title><rect x="0.0897%" y="357" width="0.0299%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="1"/><text x="0.3397%" y="367.50"></text></g><g><title>one-time initialization function for _automountPrefixes (1 samples, 0.03%)</title><rect x="0.0897%" y="341" width="0.0299%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="1"/><text x="0.3397%" y="351.50"></text></g><g><title>__swift_instantiateConcreteTypeFromMangledName (1 samples, 0.03%)</title><rect x="0.0897%" y="325" width="0.0299%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="1"/><text x="0.3397%" y="335.50"></text></g><g><title>swift_getTypeByMangledNameInContextImpl(char const*, unsigned long, swift::TargetContextDescriptor&lt;swift::InProcess&gt; const*, void const* const*) (1 samples, 0.03%)</title><rect x="0.0897%" y="309" width="0.0299%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="1"/><text x="0.3397%" y="319.50"></text></g><g><title>swift_getTypeByMangledName (1 samples, 0.03%)</title><rect x="0.0897%" y="293" width="0.0299%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1"/><text x="0.3397%" y="303.50"></text></g><g><title>swift_getTypeByMangledNameImpl(swift::MetadataRequest, __swift::__runtime::llvm::StringRef, void const* const*, std::__1::function&lt;void const* (unsigned int, unsigned int)&gt;, std::__1::function&lt;swift::TargetWitnessTable&lt;swift::InProcess&gt; const* (swift::TargetMetadata&lt;swift::InProcess&gt; const*, unsigned int)&gt;) (1 samples, 0.03%)</title><rect x="0.0897%" y="277" width="0.0299%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1"/><text x="0.3397%" y="287.50"></text></g><g><title>swift_getTypeByMangledNode (1 samples, 0.03%)</title><rect x="0.0897%" y="261" width="0.0299%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1"/><text x="0.3397%" y="271.50"></text></g><g><title>swift_getTypeByMangledNodeImpl(swift::MetadataRequest, swift::Demangle::__runtime::Demangler&amp;, swift::Demangle::__runtime::Node*, void const* const*, std::__1::function&lt;void const* (unsigned int, unsigned int)&gt;, std::__1::function&lt;swift::TargetWitnessTable&lt;swift::InProcess&gt; const* (swift::TargetMetadata&lt;swift::InProcess&gt; const*, unsigned int)&gt;) (1 samples, 0.03%)</title><rect x="0.0897%" y="245" width="0.0299%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1"/><text x="0.3397%" y="255.50"></text></g><g><title>swift::Demangle::__runtime::TypeDecoder&lt;(anonymous namespace)::DecodedMetadataBuilder&gt;::decodeMangledType(swift::Demangle::__runtime::Node*, unsigned int, bool) (1 samples, 0.03%)</title><rect x="0.0897%" y="229" width="0.0299%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1"/><text x="0.3397%" y="239.50"></text></g><g><title>(anonymous namespace)::DecodedMetadataBuilder::createBoundGenericType(swift::TargetContextDescriptor&lt;swift::InProcess&gt; const*, __swift::__runtime::llvm::ArrayRef&lt;swift::MetadataPackOrValue&gt;, swift::MetadataPackOrValue) const (1 samples, 0.03%)</title><rect x="0.0897%" y="213" width="0.0299%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1"/><text x="0.3397%" y="223.50"></text></g><g><title>__swift_instantiateCanonicalPrespecializedGenericMetadata (1 samples, 0.03%)</title><rect x="0.0897%" y="197" width="0.0299%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1"/><text x="0.3397%" y="207.50"></text></g><g><title>swift_getCanonicalPrespecializedGenericMetadata (1 samples, 0.03%)</title><rect x="0.0897%" y="181" width="0.0299%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1"/><text x="0.3397%" y="191.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.03%)</title><rect x="0.0897%" y="165" width="0.0299%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1"/><text x="0.3397%" y="175.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.03%)</title><rect x="0.0897%" y="149" width="0.0299%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1"/><text x="0.3397%" y="159.50"></text></g><g><title>cacheCanonicalSpecializedMetadata(swift::TargetTypeContextDescriptor&lt;swift::InProcess&gt; const*, long*)::$_0::__invoke(void*) (1 samples, 0.03%)</title><rect x="0.0897%" y="133" width="0.0299%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1"/><text x="0.3397%" y="143.50"></text></g><g><title>canonical specialized generic type metadata accessor for _ContiguousArrayStorage&lt;_DictionaryCodingKey&gt; (1 samples, 0.03%)</title><rect x="0.0897%" y="117" width="0.0299%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1"/><text x="0.3397%" y="127.50"></text></g><g><title>_objc_msgSend_uncached (1 samples, 0.03%)</title><rect x="0.0897%" y="101" width="0.0299%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1"/><text x="0.3397%" y="111.50"></text></g><g><title>lookUpImpOrForward (1 samples, 0.03%)</title><rect x="0.0897%" y="85" width="0.0299%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="1"/><text x="0.3397%" y="95.50"></text></g><g><title>realizeAndInitializeIfNeeded_locked(objc_object*, objc_class*, bool) (1 samples, 0.03%)</title><rect x="0.0897%" y="69" width="0.0299%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="1"/><text x="0.3397%" y="79.50"></text></g><g><title>realizeClassMaybeSwiftMaybeRelock(objc_class*, locker_mixin&lt;lockdebug::lock_mixin&lt;objc_lock_base_t&gt;&gt;&amp;, bool) (1 samples, 0.03%)</title><rect x="0.0897%" y="53" width="0.0299%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="1"/><text x="0.3397%" y="63.50"></text></g><g><title>class_data_bits_t::setData(class_rw_t*) (1 samples, 0.03%)</title><rect x="0.0897%" y="37" width="0.0299%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="1"/><text x="0.3397%" y="47.50"></text></g><g><title>_libxpc_initializer (1 samples, 0.03%)</title><rect x="0.1195%" y="469" width="0.0299%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="1"/><text x="0.3695%" y="479.50"></text></g><g><title>_xpc_collect_images (1 samples, 0.03%)</title><rect x="0.1195%" y="453" width="0.0299%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="1"/><text x="0.3695%" y="463.50"></text></g><g><title>dyld4::APIs::_dyld_register_for_bulk_image_loads(dyld4::ReadOnlyCallback&lt;void (*)(unsigned int, mach_header const**, char const**)&gt;) (1 samples, 0.03%)</title><rect x="0.1195%" y="437" width="0.0299%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="1"/><text x="0.3695%" y="447.50"></text></g><g><title>dyld4::RuntimeLocks::withLoadersReadLock(void () block_pointer) (1 samples, 0.03%)</title><rect x="0.1195%" y="421" width="0.0299%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="1"/><text x="0.3695%" y="431.50"></text></g><g><title>invocation function for block in dyld4::APIs::_dyld_register_for_bulk_image_loads(dyld4::ReadOnlyCallback&lt;void (*)(unsigned int, mach_header const**, char const**)&gt;) (1 samples, 0.03%)</title><rect x="0.1195%" y="405" width="0.0299%" height="15" fill="rgb(231,145,46)" fg:x="4" fg:w="1"/><text x="0.3695%" y="415.50"></text></g><g><title>_xpc_dyld_image_callback (1 samples, 0.03%)</title><rect x="0.1195%" y="389" width="0.0299%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="1"/><text x="0.3695%" y="399.50"></text></g><g><title>xpc_dictionary_set_uint64 (1 samples, 0.03%)</title><rect x="0.1195%" y="373" width="0.0299%" height="15" fill="rgb(217,147,25)" fg:x="4" fg:w="1"/><text x="0.3695%" y="383.50"></text></g><g><title>_platform_strcmp$VARIANT$Base (1 samples, 0.03%)</title><rect x="0.1195%" y="357" width="0.0299%" height="15" fill="rgb(247,81,37)" fg:x="4" fg:w="1"/><text x="0.3695%" y="367.50"></text></g><g><title>access (1 samples, 0.03%)</title><rect x="0.1494%" y="469" width="0.0299%" height="15" fill="rgb(209,12,38)" fg:x="5" fg:w="1"/><text x="0.3994%" y="479.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (4 samples, 0.12%)</title><rect x="0.0897%" y="629" width="0.1195%" height="15" fill="rgb(227,1,9)" fg:x="3" fg:w="4"/><text x="0.3397%" y="639.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.09%)</title><rect x="0.1195%" y="613" width="0.0897%" height="15" fill="rgb(248,47,43)" fg:x="4" fg:w="3"/><text x="0.3695%" y="623.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.09%)</title><rect x="0.1195%" y="597" width="0.0897%" height="15" fill="rgb(221,10,30)" fg:x="4" fg:w="3"/><text x="0.3695%" y="607.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (3 samples, 0.09%)</title><rect x="0.1195%" y="581" width="0.0897%" height="15" fill="rgb(210,229,1)" fg:x="4" fg:w="3"/><text x="0.3695%" y="591.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 0.09%)</title><rect x="0.1195%" y="565" width="0.0897%" height="15" fill="rgb(222,148,37)" fg:x="4" fg:w="3"/><text x="0.3695%" y="575.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (3 samples, 0.09%)</title><rect x="0.1195%" y="549" width="0.0897%" height="15" fill="rgb(234,67,33)" fg:x="4" fg:w="3"/><text x="0.3695%" y="559.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 0.09%)</title><rect x="0.1195%" y="533" width="0.0897%" height="15" fill="rgb(247,98,35)" fg:x="4" fg:w="3"/><text x="0.3695%" y="543.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (3 samples, 0.09%)</title><rect x="0.1195%" y="517" width="0.0897%" height="15" fill="rgb(247,138,52)" fg:x="4" fg:w="3"/><text x="0.3695%" y="527.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 0.09%)</title><rect x="0.1195%" y="501" width="0.0897%" height="15" fill="rgb(213,79,30)" fg:x="4" fg:w="3"/><text x="0.3695%" y="511.50"></text></g><g><title>libSystem_initializer (3 samples, 0.09%)</title><rect x="0.1195%" y="485" width="0.0897%" height="15" fill="rgb(246,177,23)" fg:x="4" fg:w="3"/><text x="0.3695%" y="495.50"></text></g><g><title>libdispatch_init (1 samples, 0.03%)</title><rect x="0.1793%" y="469" width="0.0299%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="1"/><text x="0.4293%" y="479.50"></text></g><g><title>_os_object_init (1 samples, 0.03%)</title><rect x="0.1793%" y="453" width="0.0299%" height="15" fill="rgb(216,154,8)" fg:x="6" fg:w="1"/><text x="0.4293%" y="463.50"></text></g><g><title>_objc_init (1 samples, 0.03%)</title><rect x="0.1793%" y="437" width="0.0299%" height="15" fill="rgb(244,35,45)" fg:x="6" fg:w="1"/><text x="0.4293%" y="447.50"></text></g><g><title>dyld4::Loader::applyFixupsGeneric(Diagnostics&amp;, dyld4::RuntimeState&amp;, unsigned long long, dyld3::Array&lt;void const*&gt; const&amp;, dyld3::Array&lt;void const*&gt; const&amp;, bool, dyld3::Array&lt;dyld4::Loader::MissingFlatLazySymbol&gt; const&amp;) const (4 samples, 0.12%)</title><rect x="0.2092%" y="613" width="0.1195%" height="15" fill="rgb(251,115,12)" fg:x="7" fg:w="4"/><text x="0.4592%" y="623.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachRebaseLocation_Opcodes(Diagnostics&amp;, void (unsigned long long, bool&amp;) block_pointer) const (4 samples, 0.12%)</title><rect x="0.2092%" y="597" width="0.1195%" height="15" fill="rgb(240,54,50)" fg:x="7" fg:w="4"/><text x="0.4592%" y="607.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachRebase_Opcodes(Diagnostics&amp;, dyld3::MachOLoaded::LinkEditInfo const&amp;, mach_o::Header::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&amp;, mach_o::Header::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, dyld3::MachOAnalyzer::Rebase, bool&amp;) block_pointer) const (4 samples, 0.12%)</title><rect x="0.2092%" y="581" width="0.1195%" height="15" fill="rgb(233,84,52)" fg:x="7" fg:w="4"/><text x="0.4592%" y="591.50"></text></g><g><title>invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&amp;, dyld4::RuntimeState&amp;, unsigned long long, dyld3::Array&lt;void const*&gt; const&amp;, dyld3::Array&lt;void const*&gt; const&amp;, bool, dyld3::Array&lt;dyld4::Loader::MissingFlatLazySymbol&gt; const&amp;) const (4 samples, 0.12%)</title><rect x="0.2092%" y="565" width="0.1195%" height="15" fill="rgb(207,117,47)" fg:x="7" fg:w="4"/><text x="0.4592%" y="575.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (5 samples, 0.15%)</title><rect x="0.2092%" y="629" width="0.1494%" height="15" fill="rgb(249,43,39)" fg:x="7" fg:w="5"/><text x="0.4592%" y="639.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.3288%" y="613" width="0.0299%" height="15" fill="rgb(209,38,44)" fg:x="11" fg:w="1"/><text x="0.5788%" y="623.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.3288%" y="597" width="0.0299%" height="15" fill="rgb(236,212,23)" fg:x="11" fg:w="1"/><text x="0.5788%" y="607.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.3288%" y="581" width="0.0299%" height="15" fill="rgb(242,79,21)" fg:x="11" fg:w="1"/><text x="0.5788%" y="591.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.3288%" y="565" width="0.0299%" height="15" fill="rgb(211,96,35)" fg:x="11" fg:w="1"/><text x="0.5788%" y="575.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.3288%" y="549" width="0.0299%" height="15" fill="rgb(253,215,40)" fg:x="11" fg:w="1"/><text x="0.5788%" y="559.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.3288%" y="533" width="0.0299%" height="15" fill="rgb(211,81,21)" fg:x="11" fg:w="1"/><text x="0.5788%" y="543.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.3288%" y="517" width="0.0299%" height="15" fill="rgb(208,190,38)" fg:x="11" fg:w="1"/><text x="0.5788%" y="527.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.3288%" y="501" width="0.0299%" height="15" fill="rgb(235,213,38)" fg:x="11" fg:w="1"/><text x="0.5788%" y="511.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.03%)</title><rect x="0.3288%" y="485" width="0.0299%" height="15" fill="rgb(237,122,38)" fg:x="11" fg:w="1"/><text x="0.5788%" y="495.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.03%)</title><rect x="0.3288%" y="469" width="0.0299%" height="15" fill="rgb(244,218,35)" fg:x="11" fg:w="1"/><text x="0.5788%" y="479.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.03%)</title><rect x="0.3288%" y="453" width="0.0299%" height="15" fill="rgb(240,68,47)" fg:x="11" fg:w="1"/><text x="0.5788%" y="463.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="629" width="0.0299%" height="15" fill="rgb(210,16,53)" fg:x="12" fg:w="1"/><text x="0.6086%" y="639.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="613" width="0.0299%" height="15" fill="rgb(235,124,12)" fg:x="12" fg:w="1"/><text x="0.6086%" y="623.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="597" width="0.0299%" height="15" fill="rgb(224,169,11)" fg:x="12" fg:w="1"/><text x="0.6086%" y="607.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="581" width="0.0299%" height="15" fill="rgb(250,166,2)" fg:x="12" fg:w="1"/><text x="0.6086%" y="591.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="565" width="0.0299%" height="15" fill="rgb(242,216,29)" fg:x="12" fg:w="1"/><text x="0.6086%" y="575.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="549" width="0.0299%" height="15" fill="rgb(230,116,27)" fg:x="12" fg:w="1"/><text x="0.6086%" y="559.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="533" width="0.0299%" height="15" fill="rgb(228,99,48)" fg:x="12" fg:w="1"/><text x="0.6086%" y="543.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="517" width="0.0299%" height="15" fill="rgb(253,11,6)" fg:x="12" fg:w="1"/><text x="0.6086%" y="527.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="501" width="0.0299%" height="15" fill="rgb(247,143,39)" fg:x="12" fg:w="1"/><text x="0.6086%" y="511.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="485" width="0.0299%" height="15" fill="rgb(236,97,10)" fg:x="12" fg:w="1"/><text x="0.6086%" y="495.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="469" width="0.0299%" height="15" fill="rgb(233,208,19)" fg:x="12" fg:w="1"/><text x="0.6086%" y="479.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="453" width="0.0299%" height="15" fill="rgb(216,164,2)" fg:x="12" fg:w="1"/><text x="0.6086%" y="463.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="437" width="0.0299%" height="15" fill="rgb(220,129,5)" fg:x="12" fg:w="1"/><text x="0.6086%" y="447.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="421" width="0.0299%" height="15" fill="rgb(242,17,10)" fg:x="12" fg:w="1"/><text x="0.6086%" y="431.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="405" width="0.0299%" height="15" fill="rgb(242,107,0)" fg:x="12" fg:w="1"/><text x="0.6086%" y="415.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="389" width="0.0299%" height="15" fill="rgb(251,28,31)" fg:x="12" fg:w="1"/><text x="0.6086%" y="399.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="373" width="0.0299%" height="15" fill="rgb(233,223,10)" fg:x="12" fg:w="1"/><text x="0.6086%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="357" width="0.0299%" height="15" fill="rgb(215,21,27)" fg:x="12" fg:w="1"/><text x="0.6086%" y="367.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="341" width="0.0299%" height="15" fill="rgb(232,23,21)" fg:x="12" fg:w="1"/><text x="0.6086%" y="351.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="325" width="0.0299%" height="15" fill="rgb(244,5,23)" fg:x="12" fg:w="1"/><text x="0.6086%" y="335.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="309" width="0.0299%" height="15" fill="rgb(226,81,46)" fg:x="12" fg:w="1"/><text x="0.6086%" y="319.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="293" width="0.0299%" height="15" fill="rgb(247,70,30)" fg:x="12" fg:w="1"/><text x="0.6086%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.03%)</title><rect x="0.3586%" y="277" width="0.0299%" height="15" fill="rgb(212,68,19)" fg:x="12" fg:w="1"/><text x="0.6086%" y="287.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.03%)</title><rect x="0.3586%" y="261" width="0.0299%" height="15" fill="rgb(240,187,13)" fg:x="12" fg:w="1"/><text x="0.6086%" y="271.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (12 samples, 0.36%)</title><rect x="0.0598%" y="661" width="0.3586%" height="15" fill="rgb(223,113,26)" fg:x="2" fg:w="12"/><text x="0.3098%" y="671.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (12 samples, 0.36%)</title><rect x="0.0598%" y="645" width="0.3586%" height="15" fill="rgb(206,192,2)" fg:x="2" fg:w="12"/><text x="0.3098%" y="655.50"></text></g><g><title>dyld4::RuntimeState::notifyDebuggerLoad(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt; const&amp;) (1 samples, 0.03%)</title><rect x="0.3885%" y="629" width="0.0299%" height="15" fill="rgb(241,108,4)" fg:x="13" fg:w="1"/><text x="0.6385%" y="639.50"></text></g><g><title>dyld4::ExternallyViewableState::addImages(lsl::Allocator&amp;, lsl::Allocator&amp;, std::__1::span&lt;dyld4::ExternallyViewableState::ImageInfo, 18446744073709551615ul&gt; const&amp;) (1 samples, 0.03%)</title><rect x="0.3885%" y="613" width="0.0299%" height="15" fill="rgb(247,173,49)" fg:x="13" fg:w="1"/><text x="0.6385%" y="623.50"></text></g><g><title>dyld4::ExternallyViewableState::generateAtlas(lsl::Allocator&amp;) (1 samples, 0.03%)</title><rect x="0.3885%" y="597" width="0.0299%" height="15" fill="rgb(224,114,35)" fg:x="13" fg:w="1"/><text x="0.6385%" y="607.50"></text></g><g><title>dyld4::ExternallyViewableState::generateCompactInfo(lsl::Allocator&amp;, AAREncoder&amp;) (1 samples, 0.03%)</title><rect x="0.3885%" y="581" width="0.0299%" height="15" fill="rgb(245,159,27)" fg:x="13" fg:w="1"/><text x="0.6385%" y="591.50"></text></g><g><title>dyld4::Atlas::ProcessSnapshot::addImages(dyld4::RuntimeState*, lsl::Vector&lt;AuthenticatedValue&lt;dyld4::Loader const*&gt;&gt;&amp;) (1 samples, 0.03%)</title><rect x="0.3885%" y="565" width="0.0299%" height="15" fill="rgb(245,172,44)" fg:x="13" fg:w="1"/><text x="0.6385%" y="575.50"></text></g><g><title>dyld4::Atlas::Image::Image(dyld4::RuntimeState*, lsl::Allocator&amp;, lsl::SharedPtr&lt;dyld4::Atlas::Mapper&gt;&amp;, dyld4::Loader const*) (1 samples, 0.03%)</title><rect x="0.3885%" y="549" width="0.0299%" height="15" fill="rgb(236,23,11)" fg:x="13" fg:w="1"/><text x="0.6385%" y="559.50"></text></g><g><title>dyld4::FileRecord::FileRecord(dyld4::FileManager&amp;, unsigned long long, unsigned long long, unsigned long long) (1 samples, 0.03%)</title><rect x="0.3885%" y="533" width="0.0299%" height="15" fill="rgb(205,117,38)" fg:x="13" fg:w="1"/><text x="0.6385%" y="543.50"></text></g><g><title>dyld4::FileManager::uuidForFileSystem(unsigned long long) const (1 samples, 0.03%)</title><rect x="0.3885%" y="517" width="0.0299%" height="15" fill="rgb(237,72,25)" fg:x="13" fg:w="1"/><text x="0.6385%" y="527.50"></text></g><g><title>dyld4::FileManager::reloadFSInfos() const (1 samples, 0.03%)</title><rect x="0.3885%" y="501" width="0.0299%" height="15" fill="rgb(244,70,9)" fg:x="13" fg:w="1"/><text x="0.6385%" y="511.50"></text></g><g><title>lsl::OrderedMap&lt;unsigned long long, lsl::UUID, std::__1::less&lt;unsigned long long&gt;&gt;::insert(std::__1::pair&lt;unsigned long long const, lsl::UUID&gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="0.3885%" y="485" width="0.0299%" height="15" fill="rgb(217,125,39)" fg:x="13" fg:w="1"/><text x="0.6385%" y="495.50"></text></g><g><title>lsl::BTree&lt;std::__1::pair&lt;unsigned long long, lsl::UUID&gt;, lsl::OrderedMap&lt;unsigned long long, lsl::UUID, std::__1::less&lt;unsigned long long&gt;&gt;::value_compare, false&gt;::insert_internal(lsl::BTree&lt;std::__1::pair&lt;unsigned long long, lsl::UUID&gt;, lsl::OrderedMap&lt;unsigned long long, lsl::UUID, std::__1::less&lt;unsigned long long&gt;&gt;::value_compare, false&gt;::const_iterator&amp;&amp;, std::__1::pair&lt;unsigned long long, lsl::UUID&gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="0.3885%" y="469" width="0.0299%" height="15" fill="rgb(235,36,10)" fg:x="13" fg:w="1"/><text x="0.6385%" y="479.50"></text></g><g><title>lsl::Allocator::aligned_alloc(unsigned long long, unsigned long long) (1 samples, 0.03%)</title><rect x="0.3885%" y="453" width="0.0299%" height="15" fill="rgb(251,123,47)" fg:x="13" fg:w="1"/><text x="0.6385%" y="463.50"></text></g><g><title>lsl::Allocator::Pool::aligned_alloc(unsigned long long, unsigned long long) (1 samples, 0.03%)</title><rect x="0.3885%" y="437" width="0.0299%" height="15" fill="rgb(221,13,13)" fg:x="13" fg:w="1"/><text x="0.6385%" y="447.50"></text></g><g><title>lsl::Allocator::AllocationMetadata::AllocationMetadata(lsl::Allocator::AllocationMetadata*, unsigned long long, unsigned long long, unsigned long long) (1 samples, 0.03%)</title><rect x="0.3885%" y="421" width="0.0299%" height="15" fill="rgb(238,131,9)" fg:x="13" fg:w="1"/><text x="0.6385%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (4 samples, 0.12%)</title><rect x="0.4184%" y="581" width="0.1195%" height="15" fill="rgb(211,50,8)" fg:x="14" fg:w="4"/><text x="0.6684%" y="591.50"></text></g><g><title>&lt;polars_arrow::trusted_len::TrustMyLength&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 1.37%)</title><rect x="0.5380%" y="581" width="1.3748%" height="15" fill="rgb(245,182,24)" fg:x="18" fg:w="46"/><text x="0.7880%" y="591.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.03%)</title><rect x="2.7496%" y="565" width="0.0299%" height="15" fill="rgb(242,14,37)" fg:x="92" fg:w="1"/><text x="2.9996%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (72 samples, 2.15%)</title><rect x="2.7794%" y="565" width="2.1518%" height="15" fill="rgb(246,228,12)" fg:x="93" fg:w="72"/><text x="3.0294%" y="575.50">&lt;..</text></g><g><title>&lt;polars_arrow::trusted_len::TrustMyLength&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 1.73%)</title><rect x="3.1978%" y="549" width="1.7334%" height="15" fill="rgb(213,55,15)" fg:x="107" fg:w="58"/><text x="3.4478%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="4.9313%" y="565" width="0.0598%" height="15" fill="rgb(209,9,3)" fg:x="165" fg:w="2"/><text x="5.1813%" y="575.50"></text></g><g><title>_free (2 samples, 0.06%)</title><rect x="4.9313%" y="549" width="0.0598%" height="15" fill="rgb(230,59,30)" fg:x="165" fg:w="2"/><text x="5.1813%" y="559.50"></text></g><g><title>&lt;polars_arrow::trusted_len::TrustMyLength&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 2.57%)</title><rect x="4.9910%" y="565" width="2.5702%" height="15" fill="rgb(209,121,21)" fg:x="167" fg:w="86"/><text x="5.2410%" y="575.50">&lt;p..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.54%)</title><rect x="7.5613%" y="549" width="0.5380%" height="15" fill="rgb(220,109,13)" fg:x="253" fg:w="18"/><text x="7.8113%" y="559.50"></text></g><g><title>&lt;polars_arrow::trusted_len::TrustMyLength&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="8.0395%" y="533" width="0.0598%" height="15" fill="rgb(232,18,1)" fg:x="269" fg:w="2"/><text x="8.2895%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (22 samples, 0.66%)</title><rect x="7.5613%" y="565" width="0.6575%" height="15" fill="rgb(215,41,42)" fg:x="253" fg:w="22"/><text x="7.8113%" y="575.50"></text></g><g><title>&lt;polars_arrow::trusted_len::TrustMyLength&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="8.0992%" y="549" width="0.1195%" height="15" fill="rgb(224,123,36)" fg:x="271" fg:w="4"/><text x="8.3492%" y="559.50"></text></g><g><title>_platform_memcmp (1 samples, 0.03%)</title><rect x="8.2188%" y="565" width="0.0299%" height="15" fill="rgb(240,125,3)" fg:x="275" fg:w="1"/><text x="8.4688%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="8.2487%" y="565" width="0.0299%" height="15" fill="rgb(205,98,50)" fg:x="276" fg:w="1"/><text x="8.4987%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="8.2487%" y="549" width="0.0299%" height="15" fill="rgb(205,185,37)" fg:x="276" fg:w="1"/><text x="8.4987%" y="559.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="8.2487%" y="533" width="0.0299%" height="15" fill="rgb(238,207,15)" fg:x="276" fg:w="1"/><text x="8.4987%" y="543.50"></text></g><g><title>medium_free_scan_madvise_free (4 samples, 0.12%)</title><rect x="8.2785%" y="437" width="0.1195%" height="15" fill="rgb(213,199,42)" fg:x="277" fg:w="4"/><text x="8.5285%" y="447.50"></text></g><g><title>mvm_madvise_free_plat (4 samples, 0.12%)</title><rect x="8.2785%" y="421" width="0.1195%" height="15" fill="rgb(235,201,11)" fg:x="277" fg:w="4"/><text x="8.5285%" y="431.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (4 samples, 0.12%)</title><rect x="8.2785%" y="405" width="0.1195%" height="15" fill="rgb(207,46,11)" fg:x="277" fg:w="4"/><text x="8.5285%" y="415.50"></text></g><g><title>madvise (4 samples, 0.12%)</title><rect x="8.2785%" y="389" width="0.1195%" height="15" fill="rgb(241,35,35)" fg:x="277" fg:w="4"/><text x="8.5285%" y="399.50"></text></g><g><title>medium_madvise_free_range_no_lock (12 samples, 0.36%)</title><rect x="8.3981%" y="437" width="0.3586%" height="15" fill="rgb(243,32,47)" fg:x="281" fg:w="12"/><text x="8.6481%" y="447.50"></text></g><g><title>mvm_madvise_free_plat (12 samples, 0.36%)</title><rect x="8.3981%" y="421" width="0.3586%" height="15" fill="rgb(247,202,23)" fg:x="281" fg:w="12"/><text x="8.6481%" y="431.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (12 samples, 0.36%)</title><rect x="8.3981%" y="405" width="0.3586%" height="15" fill="rgb(219,102,11)" fg:x="281" fg:w="12"/><text x="8.6481%" y="415.50"></text></g><g><title>madvise (12 samples, 0.36%)</title><rect x="8.3981%" y="389" width="0.3586%" height="15" fill="rgb(243,110,44)" fg:x="281" fg:w="12"/><text x="8.6481%" y="399.50"></text></g><g><title>free_medium (24 samples, 0.72%)</title><rect x="8.2785%" y="453" width="0.7173%" height="15" fill="rgb(222,74,54)" fg:x="277" fg:w="24"/><text x="8.5285%" y="463.50"></text></g><g><title>mvm_madvise_free_plat (8 samples, 0.24%)</title><rect x="8.7567%" y="437" width="0.2391%" height="15" fill="rgb(216,99,12)" fg:x="293" fg:w="8"/><text x="9.0067%" y="447.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (8 samples, 0.24%)</title><rect x="8.7567%" y="421" width="0.2391%" height="15" fill="rgb(226,22,26)" fg:x="293" fg:w="8"/><text x="9.0067%" y="431.50"></text></g><g><title>madvise (8 samples, 0.24%)</title><rect x="8.7567%" y="405" width="0.2391%" height="15" fill="rgb(217,163,10)" fg:x="293" fg:w="8"/><text x="9.0067%" y="415.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (28 samples, 0.84%)</title><rect x="8.2785%" y="485" width="0.8368%" height="15" fill="rgb(213,25,53)" fg:x="277" fg:w="28"/><text x="8.5285%" y="495.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (28 samples, 0.84%)</title><rect x="8.2785%" y="469" width="0.8368%" height="15" fill="rgb(252,105,26)" fg:x="277" fg:w="28"/><text x="8.5285%" y="479.50"></text></g><g><title>mvm_deallocate_plat (4 samples, 0.12%)</title><rect x="8.9958%" y="453" width="0.1195%" height="15" fill="rgb(220,39,43)" fg:x="301" fg:w="4"/><text x="9.2458%" y="463.50"></text></g><g><title>mach_vm_deallocate (4 samples, 0.12%)</title><rect x="8.9958%" y="437" width="0.1195%" height="15" fill="rgb(229,68,48)" fg:x="301" fg:w="4"/><text x="9.2458%" y="447.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.12%)</title><rect x="8.9958%" y="421" width="0.1195%" height="15" fill="rgb(252,8,32)" fg:x="301" fg:w="4"/><text x="9.2458%" y="431.50"></text></g><g><title>_szone_free (5 samples, 0.15%)</title><rect x="9.1154%" y="437" width="0.1494%" height="15" fill="rgb(223,20,43)" fg:x="305" fg:w="5"/><text x="9.3654%" y="447.50"></text></g><g><title>free_large (5 samples, 0.15%)</title><rect x="9.1154%" y="421" width="0.1494%" height="15" fill="rgb(229,81,49)" fg:x="305" fg:w="5"/><text x="9.3654%" y="431.50"></text></g><g><title>madvise (5 samples, 0.15%)</title><rect x="9.1154%" y="405" width="0.1494%" height="15" fill="rgb(236,28,36)" fg:x="305" fg:w="5"/><text x="9.3654%" y="415.50"></text></g><g><title>medium_free_scan_madvise_free (7 samples, 0.21%)</title><rect x="9.2648%" y="421" width="0.2092%" height="15" fill="rgb(249,185,26)" fg:x="310" fg:w="7"/><text x="9.5148%" y="431.50"></text></g><g><title>mvm_madvise_free_plat (7 samples, 0.21%)</title><rect x="9.2648%" y="405" width="0.2092%" height="15" fill="rgb(249,174,33)" fg:x="310" fg:w="7"/><text x="9.5148%" y="415.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (7 samples, 0.21%)</title><rect x="9.2648%" y="389" width="0.2092%" height="15" fill="rgb(233,201,37)" fg:x="310" fg:w="7"/><text x="9.5148%" y="399.50"></text></g><g><title>madvise (7 samples, 0.21%)</title><rect x="9.2648%" y="373" width="0.2092%" height="15" fill="rgb(221,78,26)" fg:x="310" fg:w="7"/><text x="9.5148%" y="383.50"></text></g><g><title>medium_madvise_free_range_no_lock (6 samples, 0.18%)</title><rect x="9.4740%" y="421" width="0.1793%" height="15" fill="rgb(250,127,30)" fg:x="317" fg:w="6"/><text x="9.7240%" y="431.50"></text></g><g><title>mvm_madvise_free_plat (6 samples, 0.18%)</title><rect x="9.4740%" y="405" width="0.1793%" height="15" fill="rgb(230,49,44)" fg:x="317" fg:w="6"/><text x="9.7240%" y="415.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (6 samples, 0.18%)</title><rect x="9.4740%" y="389" width="0.1793%" height="15" fill="rgb(229,67,23)" fg:x="317" fg:w="6"/><text x="9.7240%" y="399.50"></text></g><g><title>madvise (6 samples, 0.18%)</title><rect x="9.4740%" y="373" width="0.1793%" height="15" fill="rgb(249,83,47)" fg:x="317" fg:w="6"/><text x="9.7240%" y="383.50"></text></g><g><title>free_medium (26 samples, 0.78%)</title><rect x="9.2648%" y="437" width="0.7770%" height="15" fill="rgb(215,43,3)" fg:x="310" fg:w="26"/><text x="9.5148%" y="447.50"></text></g><g><title>mvm_madvise_free_plat (13 samples, 0.39%)</title><rect x="9.6533%" y="421" width="0.3885%" height="15" fill="rgb(238,154,13)" fg:x="323" fg:w="13"/><text x="9.9033%" y="431.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (13 samples, 0.39%)</title><rect x="9.6533%" y="405" width="0.3885%" height="15" fill="rgb(219,56,2)" fg:x="323" fg:w="13"/><text x="9.9033%" y="415.50"></text></g><g><title>madvise (13 samples, 0.39%)</title><rect x="9.6533%" y="389" width="0.3885%" height="15" fill="rgb(233,0,4)" fg:x="323" fg:w="13"/><text x="9.9033%" y="399.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (62 samples, 1.85%)</title><rect x="8.2785%" y="501" width="1.8530%" height="15" fill="rgb(235,30,7)" fg:x="277" fg:w="62"/><text x="8.5285%" y="511.50">&lt;..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (34 samples, 1.02%)</title><rect x="9.1154%" y="485" width="1.0161%" height="15" fill="rgb(250,79,13)" fg:x="305" fg:w="34"/><text x="9.3654%" y="495.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (34 samples, 1.02%)</title><rect x="9.1154%" y="469" width="1.0161%" height="15" fill="rgb(211,146,34)" fg:x="305" fg:w="34"/><text x="9.3654%" y="479.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (34 samples, 1.02%)</title><rect x="9.1154%" y="453" width="1.0161%" height="15" fill="rgb(228,22,38)" fg:x="305" fg:w="34"/><text x="9.3654%" y="463.50"></text></g><g><title>mvm_deallocate_plat (3 samples, 0.09%)</title><rect x="10.0418%" y="437" width="0.0897%" height="15" fill="rgb(235,168,5)" fg:x="336" fg:w="3"/><text x="10.2918%" y="447.50"></text></g><g><title>mach_vm_deallocate (3 samples, 0.09%)</title><rect x="10.0418%" y="421" width="0.0897%" height="15" fill="rgb(221,155,16)" fg:x="336" fg:w="3"/><text x="10.2918%" y="431.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.09%)</title><rect x="10.0418%" y="405" width="0.0897%" height="15" fill="rgb(215,215,53)" fg:x="336" fg:w="3"/><text x="10.2918%" y="415.50"></text></g><g><title>medium_free_list_find_by_ptr (2 samples, 0.06%)</title><rect x="10.1315%" y="437" width="0.0598%" height="15" fill="rgb(223,4,10)" fg:x="339" fg:w="2"/><text x="10.3815%" y="447.50"></text></g><g><title>medium_free_scan_madvise_free (5 samples, 0.15%)</title><rect x="10.1913%" y="437" width="0.1494%" height="15" fill="rgb(234,103,6)" fg:x="341" fg:w="5"/><text x="10.4413%" y="447.50"></text></g><g><title>mvm_madvise_free_plat (5 samples, 0.15%)</title><rect x="10.1913%" y="421" width="0.1494%" height="15" fill="rgb(227,97,0)" fg:x="341" fg:w="5"/><text x="10.4413%" y="431.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (5 samples, 0.15%)</title><rect x="10.1913%" y="405" width="0.1494%" height="15" fill="rgb(234,150,53)" fg:x="341" fg:w="5"/><text x="10.4413%" y="415.50"></text></g><g><title>madvise (5 samples, 0.15%)</title><rect x="10.1913%" y="389" width="0.1494%" height="15" fill="rgb(228,201,54)" fg:x="341" fg:w="5"/><text x="10.4413%" y="399.50"></text></g><g><title>medium_madvise_free_range_no_lock (8 samples, 0.24%)</title><rect x="10.3407%" y="437" width="0.2391%" height="15" fill="rgb(222,22,37)" fg:x="346" fg:w="8"/><text x="10.5907%" y="447.50"></text></g><g><title>mvm_madvise_free_plat (8 samples, 0.24%)</title><rect x="10.3407%" y="421" width="0.2391%" height="15" fill="rgb(237,53,32)" fg:x="346" fg:w="8"/><text x="10.5907%" y="431.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (8 samples, 0.24%)</title><rect x="10.3407%" y="405" width="0.2391%" height="15" fill="rgb(233,25,53)" fg:x="346" fg:w="8"/><text x="10.5907%" y="415.50"></text></g><g><title>madvise (8 samples, 0.24%)</title><rect x="10.3407%" y="389" width="0.2391%" height="15" fill="rgb(210,40,34)" fg:x="346" fg:w="8"/><text x="10.5907%" y="399.50"></text></g><g><title>free_medium (46 samples, 1.37%)</title><rect x="10.1315%" y="453" width="1.3748%" height="15" fill="rgb(241,220,44)" fg:x="339" fg:w="46"/><text x="10.3815%" y="463.50"></text></g><g><title>mvm_madvise_free_plat (31 samples, 0.93%)</title><rect x="10.5798%" y="437" width="0.9265%" height="15" fill="rgb(235,28,35)" fg:x="354" fg:w="31"/><text x="10.8298%" y="447.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (31 samples, 0.93%)</title><rect x="10.5798%" y="421" width="0.9265%" height="15" fill="rgb(210,56,17)" fg:x="354" fg:w="31"/><text x="10.8298%" y="431.50"></text></g><g><title>madvise (31 samples, 0.93%)</title><rect x="10.5798%" y="405" width="0.9265%" height="15" fill="rgb(224,130,29)" fg:x="354" fg:w="31"/><text x="10.8298%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;polars_core::frame::DataFrame&gt; (111 samples, 3.32%)</title><rect x="8.2785%" y="565" width="3.3174%" height="15" fill="rgb(235,212,8)" fg:x="277" fg:w="111"/><text x="8.5285%" y="575.50">cor..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (111 samples, 3.32%)</title><rect x="8.2785%" y="549" width="3.3174%" height="15" fill="rgb(223,33,50)" fg:x="277" fg:w="111"/><text x="8.5285%" y="559.50">all..</text></g><g><title>&lt;deduplicated_symbol&gt; (111 samples, 3.32%)</title><rect x="8.2785%" y="533" width="3.3174%" height="15" fill="rgb(219,149,13)" fg:x="277" fg:w="111"/><text x="8.5285%" y="543.50">&lt;de..</text></g><g><title>&lt;deduplicated_symbol&gt; (111 samples, 3.32%)</title><rect x="8.2785%" y="517" width="3.3174%" height="15" fill="rgb(250,156,29)" fg:x="277" fg:w="111"/><text x="8.5285%" y="527.50">&lt;de..</text></g><g><title>core::ptr::drop_in_place&lt;polars_arrow::array::primitive::PrimitiveArray&lt;i32&gt;&gt; (49 samples, 1.46%)</title><rect x="10.1315%" y="501" width="1.4644%" height="15" fill="rgb(216,193,19)" fg:x="339" fg:w="49"/><text x="10.3815%" y="511.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (49 samples, 1.46%)</title><rect x="10.1315%" y="485" width="1.4644%" height="15" fill="rgb(216,135,14)" fg:x="339" fg:w="49"/><text x="10.3815%" y="495.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (49 samples, 1.46%)</title><rect x="10.1315%" y="469" width="1.4644%" height="15" fill="rgb(241,47,5)" fg:x="339" fg:w="49"/><text x="10.3815%" y="479.50"></text></g><g><title>mvm_deallocate_plat (3 samples, 0.09%)</title><rect x="11.5063%" y="453" width="0.0897%" height="15" fill="rgb(233,42,35)" fg:x="385" fg:w="3"/><text x="11.7563%" y="463.50"></text></g><g><title>mach_vm_deallocate (3 samples, 0.09%)</title><rect x="11.5063%" y="437" width="0.0897%" height="15" fill="rgb(231,13,6)" fg:x="385" fg:w="3"/><text x="11.7563%" y="447.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.09%)</title><rect x="11.5063%" y="421" width="0.0897%" height="15" fill="rgb(207,181,40)" fg:x="385" fg:w="3"/><text x="11.7563%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (110 samples, 3.29%)</title><rect x="11.5959%" y="565" width="3.2875%" height="15" fill="rgb(254,173,49)" fg:x="388" fg:w="110"/><text x="11.8459%" y="575.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="14.8834%" y="565" width="0.0299%" height="15" fill="rgb(221,1,38)" fg:x="498" fg:w="1"/><text x="15.1334%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.06%)</title><rect x="14.9133%" y="565" width="0.0598%" height="15" fill="rgb(206,124,46)" fg:x="499" fg:w="2"/><text x="15.1633%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="14.9432%" y="549" width="0.0299%" height="15" fill="rgb(249,21,11)" fg:x="500" fg:w="1"/><text x="15.1932%" y="559.50"></text></g><g><title>&lt;polars_mem_engine::executors::cache::CachePrefiller as polars_mem_engine::executors::executor::Executor&gt;::execute (1 samples, 0.03%)</title><rect x="14.9731%" y="549" width="0.0299%" height="15" fill="rgb(222,201,40)" fg:x="501" fg:w="1"/><text x="15.2231%" y="559.50"></text></g><g><title>polars_io::pl_async::get_runtime (1 samples, 0.03%)</title><rect x="14.9731%" y="533" width="0.0299%" height="15" fill="rgb(235,61,29)" fg:x="501" fg:w="1"/><text x="15.2231%" y="543.50"></text></g><g><title>std::sys::sync::once::queue::Once::call (1 samples, 0.03%)</title><rect x="14.9731%" y="517" width="0.0299%" height="15" fill="rgb(219,207,3)" fg:x="501" fg:w="1"/><text x="15.2231%" y="527.50"></text></g><g><title>std::sync::poison::once::Once::call_once::_{{closure}} (1 samples, 0.03%)</title><rect x="14.9731%" y="501" width="0.0299%" height="15" fill="rgb(222,56,46)" fg:x="501" fg:w="1"/><text x="15.2231%" y="511.50"></text></g><g><title>polars_io::pl_async::RuntimeManager::new (1 samples, 0.03%)</title><rect x="14.9731%" y="485" width="0.0299%" height="15" fill="rgb(239,76,54)" fg:x="501" fg:w="1"/><text x="15.2231%" y="495.50"></text></g><g><title>tokio::runtime::builder::Builder::build (1 samples, 0.03%)</title><rect x="14.9731%" y="469" width="0.0299%" height="15" fill="rgb(231,124,27)" fg:x="501" fg:w="1"/><text x="15.2231%" y="479.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (1 samples, 0.03%)</title><rect x="14.9731%" y="453" width="0.0299%" height="15" fill="rgb(249,195,6)" fg:x="501" fg:w="1"/><text x="15.2231%" y="463.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.03%)</title><rect x="14.9731%" y="437" width="0.0299%" height="15" fill="rgb(237,174,47)" fg:x="501" fg:w="1"/><text x="15.2231%" y="447.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.03%)</title><rect x="14.9731%" y="421" width="0.0299%" height="15" fill="rgb(206,201,31)" fg:x="501" fg:w="1"/><text x="15.2231%" y="431.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.03%)</title><rect x="14.9731%" y="405" width="0.0299%" height="15" fill="rgb(231,57,52)" fg:x="501" fg:w="1"/><text x="15.2231%" y="415.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (1 samples, 0.03%)</title><rect x="14.9731%" y="389" width="0.0299%" height="15" fill="rgb(248,177,22)" fg:x="501" fg:w="1"/><text x="15.2231%" y="399.50"></text></g><g><title>std::thread::Thread::new (1 samples, 0.03%)</title><rect x="14.9731%" y="373" width="0.0299%" height="15" fill="rgb(215,211,37)" fg:x="501" fg:w="1"/><text x="15.2231%" y="383.50"></text></g><g><title>&lt;std::thread::thread_name_string::ThreadNameString as core::convert::From&lt;alloc::string::String&gt;&gt;::from (1 samples, 0.03%)</title><rect x="14.9731%" y="357" width="0.0299%" height="15" fill="rgb(241,128,51)" fg:x="501" fg:w="1"/><text x="15.2231%" y="367.50"></text></g><g><title>alloc::ffi::c_str::CString::_from_vec_unchecked (1 samples, 0.03%)</title><rect x="14.9731%" y="341" width="0.0299%" height="15" fill="rgb(227,165,31)" fg:x="501" fg:w="1"/><text x="15.2231%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="14.9731%" y="325" width="0.0299%" height="15" fill="rgb(228,167,24)" fg:x="501" fg:w="1"/><text x="15.2231%" y="335.50"></text></g><g><title>_realloc (1 samples, 0.03%)</title><rect x="14.9731%" y="309" width="0.0299%" height="15" fill="rgb(228,143,12)" fg:x="501" fg:w="1"/><text x="15.2231%" y="319.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="14.9731%" y="293" width="0.0299%" height="15" fill="rgb(249,149,8)" fg:x="501" fg:w="1"/><text x="15.2231%" y="303.50"></text></g><g><title>nanov2_realloc (1 samples, 0.03%)</title><rect x="14.9731%" y="277" width="0.0299%" height="15" fill="rgb(243,35,44)" fg:x="501" fg:w="1"/><text x="15.2231%" y="287.50"></text></g><g><title>nanov2_pointer_size (1 samples, 0.03%)</title><rect x="14.9731%" y="261" width="0.0299%" height="15" fill="rgb(246,89,9)" fg:x="501" fg:w="1"/><text x="15.2231%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;polars_plan::dsl::plan::DslPlan&gt; (1 samples, 0.03%)</title><rect x="15.0030%" y="549" width="0.0299%" height="15" fill="rgb(233,213,13)" fg:x="502" fg:w="1"/><text x="15.2530%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="15.0030%" y="533" width="0.0299%" height="15" fill="rgb(233,141,41)" fg:x="502" fg:w="1"/><text x="15.2530%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="15.0030%" y="517" width="0.0299%" height="15" fill="rgb(239,167,4)" fg:x="502" fg:w="1"/><text x="15.2530%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;polars_plan::plans::ir::IR&gt; (1 samples, 0.03%)</title><rect x="15.0030%" y="501" width="0.0299%" height="15" fill="rgb(209,217,16)" fg:x="502" fg:w="1"/><text x="15.2530%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;polars_plan::dsl::file_scan::FileScan&gt;&gt; (1 samples, 0.03%)</title><rect x="15.0030%" y="485" width="0.0299%" height="15" fill="rgb(219,88,35)" fg:x="502" fg:w="1"/><text x="15.2530%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="15.0030%" y="469" width="0.0299%" height="15" fill="rgb(220,193,23)" fg:x="502" fg:w="1"/><text x="15.2530%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;polars_parquet::parquet::metadata::row_metadata::RowGroupMetadata&gt; (1 samples, 0.03%)</title><rect x="15.0030%" y="453" width="0.0299%" height="15" fill="rgb(230,90,52)" fg:x="502" fg:w="1"/><text x="15.2530%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="15.0030%" y="437" width="0.0299%" height="15" fill="rgb(252,106,19)" fg:x="502" fg:w="1"/><text x="15.2530%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;polars_parquet_format::parquet_format::ColumnChunk&gt; (1 samples, 0.03%)</title><rect x="15.0030%" y="421" width="0.0299%" height="15" fill="rgb(206,74,20)" fg:x="502" fg:w="1"/><text x="15.2530%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;polars_parquet_format::parquet_format::ColumnMetaData&gt;&gt; (1 samples, 0.03%)</title><rect x="15.0030%" y="405" width="0.0299%" height="15" fill="rgb(230,138,44)" fg:x="502" fg:w="1"/><text x="15.2530%" y="415.50"></text></g><g><title>nanov2_madvise_block (1 samples, 0.03%)</title><rect x="15.0030%" y="389" width="0.0299%" height="15" fill="rgb(235,182,43)" fg:x="502" fg:w="1"/><text x="15.2530%" y="399.50"></text></g><g><title>nanov2_madvise_block_locked (1 samples, 0.03%)</title><rect x="15.0030%" y="373" width="0.0299%" height="15" fill="rgb(242,16,51)" fg:x="502" fg:w="1"/><text x="15.2530%" y="383.50"></text></g><g><title>mvm_madvise_free_plat (1 samples, 0.03%)</title><rect x="15.0030%" y="357" width="0.0299%" height="15" fill="rgb(248,9,4)" fg:x="502" fg:w="1"/><text x="15.2530%" y="367.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (1 samples, 0.03%)</title><rect x="15.0030%" y="341" width="0.0299%" height="15" fill="rgb(210,31,22)" fg:x="502" fg:w="1"/><text x="15.2530%" y="351.50"></text></g><g><title>madvise (1 samples, 0.03%)</title><rect x="15.0030%" y="325" width="0.0299%" height="15" fill="rgb(239,54,39)" fg:x="502" fg:w="1"/><text x="15.2530%" y="335.50"></text></g><g><title>polars_plan::dsl::scan_sources::ScanSources::expand_paths_with_hive_update (1 samples, 0.03%)</title><rect x="15.0329%" y="421" width="0.0299%" height="15" fill="rgb(230,99,41)" fg:x="503" fg:w="1"/><text x="15.2829%" y="431.50"></text></g><g><title>polars_io::path_utils::expand_paths_hive (1 samples, 0.03%)</title><rect x="15.0329%" y="405" width="0.0299%" height="15" fill="rgb(253,106,12)" fg:x="503" fg:w="1"/><text x="15.2829%" y="415.50"></text></g><g><title>std::sys::sync::once::queue::Once::call (1 samples, 0.03%)</title><rect x="15.0329%" y="389" width="0.0299%" height="15" fill="rgb(213,46,41)" fg:x="503" fg:w="1"/><text x="15.2829%" y="399.50"></text></g><g><title>std::sync::poison::once::Once::call_once::_{{closure}} (1 samples, 0.03%)</title><rect x="15.0329%" y="373" width="0.0299%" height="15" fill="rgb(215,133,35)" fg:x="503" fg:w="1"/><text x="15.2829%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="15.0329%" y="357" width="0.0299%" height="15" fill="rgb(213,28,5)" fg:x="503" fg:w="1"/><text x="15.2829%" y="367.50"></text></g><g><title>regex::regex::string::Regex::new (1 samples, 0.03%)</title><rect x="15.0329%" y="341" width="0.0299%" height="15" fill="rgb(215,77,49)" fg:x="503" fg:w="1"/><text x="15.2829%" y="351.50"></text></g><g><title>regex::builders::Builder::build_one_string (1 samples, 0.03%)</title><rect x="15.0329%" y="325" width="0.0299%" height="15" fill="rgb(248,100,22)" fg:x="503" fg:w="1"/><text x="15.2829%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1 samples, 0.03%)</title><rect x="15.0329%" y="309" width="0.0299%" height="15" fill="rgb(208,67,9)" fg:x="503" fg:w="1"/><text x="15.2829%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.03%)</title><rect x="15.0329%" y="293" width="0.0299%" height="15" fill="rgb(219,133,21)" fg:x="503" fg:w="1"/><text x="15.2829%" y="303.50"></text></g><g><title>&lt;polars_parquet_format::parquet_format::FileMetaData as polars_parquet_format::thrift::protocol::ReadThrift&gt;::read_from_in_protocol (1 samples, 0.03%)</title><rect x="15.0628%" y="341" width="0.0299%" height="15" fill="rgb(246,46,29)" fg:x="504" fg:w="1"/><text x="15.3128%" y="351.50"></text></g><g><title>&lt;polars_parquet_format::parquet_format::RowGroup as polars_parquet_format::thrift::protocol::ReadThrift&gt;::read_from_in_protocol (1 samples, 0.03%)</title><rect x="15.0628%" y="325" width="0.0299%" height="15" fill="rgb(246,185,52)" fg:x="504" fg:w="1"/><text x="15.3128%" y="335.50"></text></g><g><title>&lt;polars_parquet_format::thrift::protocol::compact::TCompactInputProtocol&lt;R&gt; as polars_parquet_format::thrift::protocol::TInputProtocol&gt;::read_bytes (1 samples, 0.03%)</title><rect x="15.0628%" y="309" width="0.0299%" height="15" fill="rgb(252,136,11)" fg:x="504" fg:w="1"/><text x="15.3128%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="15.0628%" y="293" width="0.0299%" height="15" fill="rgb(219,138,53)" fg:x="504" fg:w="1"/><text x="15.3128%" y="303.50"></text></g><g><title>nanov2_malloc_type (1 samples, 0.03%)</title><rect x="15.0628%" y="277" width="0.0299%" height="15" fill="rgb(211,51,23)" fg:x="504" fg:w="1"/><text x="15.3128%" y="287.50"></text></g><g><title>nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="15.0628%" y="261" width="0.0299%" height="15" fill="rgb(247,221,28)" fg:x="504" fg:w="1"/><text x="15.3128%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.03%)</title><rect x="15.0926%" y="325" width="0.0299%" height="15" fill="rgb(251,222,45)" fg:x="505" fg:w="1"/><text x="15.3426%" y="335.50"></text></g><g><title>alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="15.0926%" y="309" width="0.0299%" height="15" fill="rgb(217,162,53)" fg:x="505" fg:w="1"/><text x="15.3426%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="15.0926%" y="293" width="0.0299%" height="15" fill="rgb(229,93,14)" fg:x="505" fg:w="1"/><text x="15.3426%" y="303.50"></text></g><g><title>polars_parquet::parquet::metadata::row_metadata::RowGroupMetadata::try_from_thrift (1 samples, 0.03%)</title><rect x="15.0926%" y="277" width="0.0299%" height="15" fill="rgb(209,67,49)" fg:x="505" fg:w="1"/><text x="15.3426%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.03%)</title><rect x="15.0926%" y="261" width="0.0299%" height="15" fill="rgb(213,87,29)" fg:x="505" fg:w="1"/><text x="15.3426%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="15.0926%" y="245" width="0.0299%" height="15" fill="rgb(205,151,52)" fg:x="505" fg:w="1"/><text x="15.3426%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="15.0926%" y="229" width="0.0299%" height="15" fill="rgb(253,215,39)" fg:x="505" fg:w="1"/><text x="15.3426%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="15.0926%" y="213" width="0.0299%" height="15" fill="rgb(221,220,41)" fg:x="505" fg:w="1"/><text x="15.3426%" y="223.50"></text></g><g><title>polars_io::parquet::read::reader::ParquetReader&lt;R&gt;::schema (3 samples, 0.09%)</title><rect x="15.0628%" y="405" width="0.0897%" height="15" fill="rgb(218,133,21)" fg:x="504" fg:w="3"/><text x="15.3128%" y="415.50"></text></g><g><title>polars_io::parquet::read::reader::ParquetReader&lt;R&gt;::get_metadata (3 samples, 0.09%)</title><rect x="15.0628%" y="389" width="0.0897%" height="15" fill="rgb(221,193,43)" fg:x="504" fg:w="3"/><text x="15.3128%" y="399.50"></text></g><g><title>polars_parquet::parquet::read::metadata::read_metadata (3 samples, 0.09%)</title><rect x="15.0628%" y="373" width="0.0897%" height="15" fill="rgb(240,128,52)" fg:x="504" fg:w="3"/><text x="15.3128%" y="383.50"></text></g><g><title>polars_parquet::parquet::read::metadata::deserialize_metadata (3 samples, 0.09%)</title><rect x="15.0628%" y="357" width="0.0897%" height="15" fill="rgb(253,114,12)" fg:x="504" fg:w="3"/><text x="15.3128%" y="367.50"></text></g><g><title>polars_parquet::parquet::metadata::file_metadata::FileMetadata::try_from_thrift (2 samples, 0.06%)</title><rect x="15.0926%" y="341" width="0.0598%" height="15" fill="rgb(215,223,47)" fg:x="505" fg:w="2"/><text x="15.3426%" y="351.50"></text></g><g><title>polars_parquet::parquet::schema::io_thrift::from_thrift::_&lt;impl polars_parquet::parquet::schema::types::parquet_type::ParquetType&gt;::try_from_thrift (1 samples, 0.03%)</title><rect x="15.1225%" y="325" width="0.0299%" height="15" fill="rgb(248,225,23)" fg:x="506" fg:w="1"/><text x="15.3725%" y="335.50"></text></g><g><title>polars_parquet::parquet::schema::io_thrift::from_thrift::from_thrift_helper (1 samples, 0.03%)</title><rect x="15.1225%" y="309" width="0.0299%" height="15" fill="rgb(250,108,0)" fg:x="506" fg:w="1"/><text x="15.3725%" y="319.50"></text></g><g><title>polars_parquet::parquet::schema::io_thrift::from_thrift::from_thrift_helper (1 samples, 0.03%)</title><rect x="15.1225%" y="293" width="0.0299%" height="15" fill="rgb(228,208,7)" fg:x="506" fg:w="1"/><text x="15.3725%" y="303.50"></text></g><g><title>polars_parquet::parquet::schema::types::parquet_type::ParquetType::try_from_primitive (1 samples, 0.03%)</title><rect x="15.1225%" y="277" width="0.0299%" height="15" fill="rgb(244,45,10)" fg:x="506" fg:w="1"/><text x="15.3725%" y="287.50"></text></g><g><title>polars_parquet::parquet::schema::types::spec::check_converted_invariants (1 samples, 0.03%)</title><rect x="15.1225%" y="261" width="0.0299%" height="15" fill="rgb(207,125,25)" fg:x="506" fg:w="1"/><text x="15.3725%" y="271.50"></text></g><g><title>polars_plan::plans::conversion::dsl_to_ir::to_alp (5 samples, 0.15%)</title><rect x="15.0329%" y="501" width="0.1494%" height="15" fill="rgb(210,195,18)" fg:x="503" fg:w="5"/><text x="15.2829%" y="511.50"></text></g><g><title>polars_plan::plans::conversion::dsl_to_ir::to_alp_impl (5 samples, 0.15%)</title><rect x="15.0329%" y="485" width="0.1494%" height="15" fill="rgb(249,80,12)" fg:x="503" fg:w="5"/><text x="15.2829%" y="495.50"></text></g><g><title>polars_plan::plans::conversion::dsl_to_ir::to_alp_impl::_{{closure}} (5 samples, 0.15%)</title><rect x="15.0329%" y="469" width="0.1494%" height="15" fill="rgb(221,65,9)" fg:x="503" fg:w="5"/><text x="15.2829%" y="479.50"></text></g><g><title>polars_plan::plans::conversion::dsl_to_ir::to_alp_impl (5 samples, 0.15%)</title><rect x="15.0329%" y="453" width="0.1494%" height="15" fill="rgb(235,49,36)" fg:x="503" fg:w="5"/><text x="15.2829%" y="463.50"></text></g><g><title>polars_plan::plans::conversion::dsl_to_ir::to_alp_impl::_{{closure}} (5 samples, 0.15%)</title><rect x="15.0329%" y="437" width="0.1494%" height="15" fill="rgb(225,32,20)" fg:x="503" fg:w="5"/><text x="15.2829%" y="447.50"></text></g><g><title>polars_plan::plans::conversion::scans::parquet_file_info (4 samples, 0.12%)</title><rect x="15.0628%" y="421" width="0.1195%" height="15" fill="rgb(215,141,46)" fg:x="504" fg:w="4"/><text x="15.3128%" y="431.50"></text></g><g><title>polars_plan::dsl::scan_sources::ScanSourceRef::to_memslice_possibly_async (1 samples, 0.03%)</title><rect x="15.1524%" y="405" width="0.0299%" height="15" fill="rgb(250,160,47)" fg:x="507" fg:w="1"/><text x="15.4024%" y="415.50"></text></g><g><title>polars_utils::mmap::MMapSemaphore::new_from_file (1 samples, 0.03%)</title><rect x="15.1524%" y="389" width="0.0299%" height="15" fill="rgb(216,222,40)" fg:x="507" fg:w="1"/><text x="15.4024%" y="399.50"></text></g><g><title>polars_utils::mmap::MMapSemaphore::new_from_file_with_options (1 samples, 0.03%)</title><rect x="15.1524%" y="373" width="0.0299%" height="15" fill="rgb(234,217,39)" fg:x="507" fg:w="1"/><text x="15.4024%" y="383.50"></text></g><g><title>memmap2::os::MmapInner::map (1 samples, 0.03%)</title><rect x="15.1524%" y="357" width="0.0299%" height="15" fill="rgb(207,178,40)" fg:x="507" fg:w="1"/><text x="15.4024%" y="367.50"></text></g><g><title>mmap (1 samples, 0.03%)</title><rect x="15.1524%" y="341" width="0.0299%" height="15" fill="rgb(221,136,13)" fg:x="507" fg:w="1"/><text x="15.4024%" y="351.50"></text></g><g><title>__mmap (1 samples, 0.03%)</title><rect x="15.1524%" y="325" width="0.0299%" height="15" fill="rgb(249,199,10)" fg:x="507" fg:w="1"/><text x="15.4024%" y="335.50"></text></g><g><title>polars_lazy::frame::LazyFrame::to_alp_optimized (6 samples, 0.18%)</title><rect x="15.0329%" y="549" width="0.1793%" height="15" fill="rgb(249,222,13)" fg:x="503" fg:w="6"/><text x="15.2829%" y="559.50"></text></g><g><title>polars_lazy::frame::LazyFrame::optimize_with_scratch (6 samples, 0.18%)</title><rect x="15.0329%" y="533" width="0.1793%" height="15" fill="rgb(244,185,38)" fg:x="503" fg:w="6"/><text x="15.2829%" y="543.50"></text></g><g><title>polars_plan::plans::optimizer::optimize (6 samples, 0.18%)</title><rect x="15.0329%" y="517" width="0.1793%" height="15" fill="rgb(236,202,9)" fg:x="503" fg:w="6"/><text x="15.2829%" y="527.50"></text></g><g><title>polars_plan::plans::optimizer::projection_pushdown::ProjectionPushDown::push_down (1 samples, 0.03%)</title><rect x="15.1823%" y="501" width="0.0299%" height="15" fill="rgb(250,229,37)" fg:x="508" fg:w="1"/><text x="15.4323%" y="511.50"></text></g><g><title>polars_plan::plans::optimizer::projection_pushdown::generic::process_generic (1 samples, 0.03%)</title><rect x="15.1823%" y="485" width="0.0299%" height="15" fill="rgb(206,174,23)" fg:x="508" fg:w="1"/><text x="15.4323%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="15.1823%" y="469" width="0.0299%" height="15" fill="rgb(211,33,43)" fg:x="508" fg:w="1"/><text x="15.4323%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="15.1823%" y="453" width="0.0299%" height="15" fill="rgb(245,58,50)" fg:x="508" fg:w="1"/><text x="15.4323%" y="463.50"></text></g><g><title>start (509 samples, 15.21%)</title><rect x="0.0299%" y="677" width="15.2122%" height="15" fill="rgb(244,68,36)" fg:x="1" fg:w="509"/><text x="0.2799%" y="687.50">start</text></g><g><title>main (496 samples, 14.82%)</title><rect x="0.4184%" y="661" width="14.8237%" height="15" fill="rgb(232,229,15)" fg:x="14" fg:w="496"/><text x="0.6684%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (496 samples, 14.82%)</title><rect x="0.4184%" y="645" width="14.8237%" height="15" fill="rgb(254,30,23)" fg:x="14" fg:w="496"/><text x="0.6684%" y="655.50">std::rt::lang_start_int..</text></g><g><title>std::rt::lang_start::_{{closure}} (496 samples, 14.82%)</title><rect x="0.4184%" y="629" width="14.8237%" height="15" fill="rgb(235,160,14)" fg:x="14" fg:w="496"/><text x="0.6684%" y="639.50">std::rt::lang_start::_{..</text></g><g><title>core::ops::function::FnOnce::call_once (496 samples, 14.82%)</title><rect x="0.4184%" y="613" width="14.8237%" height="15" fill="rgb(212,155,44)" fg:x="14" fg:w="496"/><text x="0.6684%" y="623.50">core::ops::function::Fn..</text></g><g><title>lfj::main (496 samples, 14.82%)</title><rect x="0.4184%" y="597" width="14.8237%" height="15" fill="rgb(226,2,50)" fg:x="14" fg:w="496"/><text x="0.6684%" y="607.50">lfj::main</text></g><g><title>lfj::o7c::q7c (446 samples, 13.33%)</title><rect x="1.9127%" y="581" width="13.3293%" height="15" fill="rgb(234,177,6)" fg:x="64" fg:w="446"/><text x="2.1627%" y="591.50">lfj::o7c::q7c</text></g><g><title>polars_lazy::frame::LazyFrame::collect_with_engine (9 samples, 0.27%)</title><rect x="14.9731%" y="565" width="0.2690%" height="15" fill="rgb(217,24,9)" fg:x="501" fg:w="9"/><text x="15.2231%" y="575.50"></text></g><g><title>polars_mem_engine::planner::lp::create_physical_plan (1 samples, 0.03%)</title><rect x="15.2122%" y="549" width="0.0299%" height="15" fill="rgb(220,13,46)" fg:x="509" fg:w="1"/><text x="15.4622%" y="559.50"></text></g><g><title>polars_mem_engine::planner::lp::create_physical_plan_impl::_{{closure}} (1 samples, 0.03%)</title><rect x="15.2122%" y="533" width="0.0299%" height="15" fill="rgb(239,221,27)" fg:x="509" fg:w="1"/><text x="15.4622%" y="543.50"></text></g><g><title>polars_mem_engine::planner::lp::create_physical_plan_impl::_{{closure}} (1 samples, 0.03%)</title><rect x="15.2122%" y="517" width="0.0299%" height="15" fill="rgb(222,198,25)" fg:x="509" fg:w="1"/><text x="15.4622%" y="527.50"></text></g><g><title>polars_lazy::frame::streaming_dispatch::build_streaming_query_executor (1 samples, 0.03%)</title><rect x="15.2122%" y="501" width="0.0299%" height="15" fill="rgb(211,99,13)" fg:x="509" fg:w="1"/><text x="15.4622%" y="511.50"></text></g><g><title>polars_stream::skeleton::StreamingQuery::build (1 samples, 0.03%)</title><rect x="15.2122%" y="485" width="0.0299%" height="15" fill="rgb(232,111,31)" fg:x="509" fg:w="1"/><text x="15.4622%" y="495.50"></text></g><g><title>polars_stream::physical_plan::build_physical_plan (1 samples, 0.03%)</title><rect x="15.2122%" y="469" width="0.0299%" height="15" fill="rgb(245,82,37)" fg:x="509" fg:w="1"/><text x="15.4622%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="15.2122%" y="453" width="0.0299%" height="15" fill="rgb(227,149,46)" fg:x="509" fg:w="1"/><text x="15.4622%" y="463.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (1 samples, 0.03%)</title><rect x="15.2720%" y="549" width="0.0299%" height="15" fill="rgb(218,36,50)" fg:x="511" fg:w="1"/><text x="15.5220%" y="559.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (1 samples, 0.03%)</title><rect x="15.2720%" y="533" width="0.0299%" height="15" fill="rgb(226,80,48)" fg:x="511" fg:w="1"/><text x="15.5220%" y="543.50"></text></g><g><title>nanov2_malloc_type (2 samples, 0.06%)</title><rect x="15.3019%" y="517" width="0.0598%" height="15" fill="rgb(238,224,15)" fg:x="512" fg:w="2"/><text x="15.5519%" y="527.50"></text></g><g><title>nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="15.3317%" y="501" width="0.0299%" height="15" fill="rgb(241,136,10)" fg:x="513" fg:w="1"/><text x="15.5817%" y="511.50"></text></g><g><title>nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="15.3317%" y="485" width="0.0299%" height="15" fill="rgb(208,32,45)" fg:x="513" fg:w="1"/><text x="15.5817%" y="495.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (3 samples, 0.09%)</title><rect x="15.3019%" y="533" width="0.0897%" height="15" fill="rgb(207,135,9)" fg:x="512" fg:w="3"/><text x="15.5519%" y="543.50"></text></g><g><title>polars_parquet::parquet::metadata::column_chunk_metadata::ColumnChunkMetadata::byte_range (1 samples, 0.03%)</title><rect x="15.3616%" y="517" width="0.0299%" height="15" fill="rgb(206,86,44)" fg:x="514" fg:w="1"/><text x="15.6116%" y="527.50"></text></g><g><title>nanov2_malloc_type (1 samples, 0.03%)</title><rect x="15.3915%" y="517" width="0.0299%" height="15" fill="rgb(245,177,15)" fg:x="515" fg:w="1"/><text x="15.6415%" y="527.50"></text></g><g><title>polars_core::series::from::_&lt;impl core::convert::TryFrom&lt;(&amp;polars_arrow::datatypes::field::Field,alloc::boxed::Box&lt;dyn polars_arrow::array::Array&gt;)&gt; for polars_core::series::Series&gt;::try_from (2 samples, 0.06%)</title><rect x="15.3915%" y="533" width="0.0598%" height="15" fill="rgb(206,64,50)" fg:x="515" fg:w="2"/><text x="15.6415%" y="543.50"></text></g><g><title>polars_core::series::from::_&lt;impl core::convert::TryFrom&lt;(&amp;polars_arrow::datatypes::field::Field,alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn polars_arrow::array::Array&gt;&gt;)&gt; for polars_core::series::Series&gt;::try_from (1 samples, 0.03%)</title><rect x="15.4214%" y="517" width="0.0299%" height="15" fill="rgb(234,36,40)" fg:x="516" fg:w="1"/><text x="15.6714%" y="527.50"></text></g><g><title>polars_core::series::from::_&lt;impl polars_core::series::Series&gt;::_try_from_arrow_unchecked_with_md (1 samples, 0.03%)</title><rect x="15.4214%" y="501" width="0.0299%" height="15" fill="rgb(213,64,8)" fg:x="516" fg:w="1"/><text x="15.6714%" y="511.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (1 samples, 0.03%)</title><rect x="15.4214%" y="485" width="0.0299%" height="15" fill="rgb(210,75,36)" fg:x="516" fg:w="1"/><text x="15.6714%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="15.4513%" y="501" width="0.0299%" height="15" fill="rgb(229,88,21)" fg:x="517" fg:w="1"/><text x="15.7013%" y="511.50"></text></g><g><title>polars_utils::mem::prefetch::prefetch_l2 (1 samples, 0.03%)</title><rect x="15.4513%" y="485" width="0.0299%" height="15" fill="rgb(252,204,47)" fg:x="517" fg:w="1"/><text x="15.7013%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::unzip (2 samples, 0.06%)</title><rect x="15.4513%" y="517" width="0.0598%" height="15" fill="rgb(208,77,27)" fg:x="517" fg:w="2"/><text x="15.7013%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="15.4812%" y="501" width="0.0299%" height="15" fill="rgb(221,76,26)" fg:x="518" fg:w="1"/><text x="15.7312%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="15.4812%" y="485" width="0.0299%" height="15" fill="rgb(225,139,18)" fg:x="518" fg:w="1"/><text x="15.7312%" y="495.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="15.4812%" y="469" width="0.0299%" height="15" fill="rgb(230,137,11)" fg:x="518" fg:w="1"/><text x="15.7312%" y="479.50"></text></g><g><title>DYLD-STUB$$memcpy (8 samples, 0.24%)</title><rect x="27.7346%" y="421" width="0.2391%" height="15" fill="rgb(212,28,1)" fg:x="928" fg:w="8"/><text x="27.9846%" y="431.50"></text></g><g><title>_platform_memmove (300 samples, 8.97%)</title><rect x="27.9737%" y="421" width="8.9659%" height="15" fill="rgb(248,164,17)" fg:x="936" fg:w="300"/><text x="28.2237%" y="431.50">_platform_mem..</text></g><g><title>core::str::converts::from_utf8 (36 samples, 1.08%)</title><rect x="36.9396%" y="421" width="1.0759%" height="15" fill="rgb(222,171,42)" fg:x="1236" fg:w="36"/><text x="37.1896%" y="431.50"></text></g><g><title>polars_parquet::arrow::read::deserialize::binview::decode_plain (816 samples, 24.39%)</title><rect x="15.5708%" y="453" width="24.3873%" height="15" fill="rgb(243,84,45)" fg:x="521" fg:w="816"/><text x="15.8208%" y="463.50">polars_parquet::arrow::read::deserializ..</text></g><g><title>polars_parquet::arrow::read::deserialize::binview::decode_plain_generic (816 samples, 24.39%)</title><rect x="15.5708%" y="437" width="24.3873%" height="15" fill="rgb(252,49,23)" fg:x="521" fg:w="816"/><text x="15.8208%" y="447.50">polars_parquet::arrow::read::deserializ..</text></g><g><title>simdutf8::implementation::aarch64::validate_utf8_basic_neon (65 samples, 1.94%)</title><rect x="38.0155%" y="421" width="1.9426%" height="15" fill="rgb(215,19,7)" fg:x="1272" fg:w="65"/><text x="38.2655%" y="431.50">s..</text></g><g><title>polars_arrow::bitmap::bitmask::BitMask::nth_set_bit_idx (7 samples, 0.21%)</title><rect x="41.8111%" y="421" width="0.2092%" height="15" fill="rgb(238,81,41)" fg:x="1399" fg:w="7"/><text x="42.0611%" y="431.50"></text></g><g><title>polars_parquet::arrow::read::deserialize::dictionary_encoded::optional::decode (83 samples, 2.48%)</title><rect x="39.9582%" y="437" width="2.4806%" height="15" fill="rgb(210,199,37)" fg:x="1337" fg:w="83"/><text x="40.2082%" y="447.50">po..</text></g><g><title>polars_parquet::parquet::encoding::hybrid_rle::HybridRleDecoder::next_chunk (14 samples, 0.42%)</title><rect x="42.0203%" y="421" width="0.4184%" height="15" fill="rgb(244,192,49)" fg:x="1406" fg:w="14"/><text x="42.2703%" y="431.50"></text></g><g><title>_platform_memmove (2 samples, 0.06%)</title><rect x="42.3790%" y="405" width="0.0598%" height="15" fill="rgb(226,211,11)" fg:x="1418" fg:w="2"/><text x="42.6290%" y="415.50"></text></g><g><title>&lt;polars_parquet::arrow::read::deserialize::binview::BinViewDecoder as polars_parquet::arrow::read::deserialize::utils::Decoder&gt;::extend_filtered_with_state (907 samples, 27.11%)</title><rect x="15.5111%" y="469" width="27.1070%" height="15" fill="rgb(236,162,54)" fg:x="519" fg:w="907"/><text x="15.7611%" y="479.50">&lt;polars_parquet::arrow::read::deserialize::..</text></g><g><title>polars_parquet::arrow::read::deserialize::dictionary_encoded::decode_dict_dispatch (89 samples, 2.66%)</title><rect x="39.9582%" y="453" width="2.6599%" height="15" fill="rgb(220,229,9)" fg:x="1337" fg:w="89"/><text x="40.2082%" y="463.50">po..</text></g><g><title>polars_parquet::arrow::read::deserialize::dictionary_encoded::required::decode (6 samples, 0.18%)</title><rect x="42.4387%" y="437" width="0.1793%" height="15" fill="rgb(250,87,22)" fg:x="1420" fg:w="6"/><text x="42.6887%" y="447.50"></text></g><g><title>free_small (1 samples, 0.03%)</title><rect x="42.6181%" y="453" width="0.0299%" height="15" fill="rgb(239,43,17)" fg:x="1426" fg:w="1"/><text x="42.8681%" y="463.50"></text></g><g><title>small_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="42.6181%" y="437" width="0.0299%" height="15" fill="rgb(231,177,25)" fg:x="1426" fg:w="1"/><text x="42.8681%" y="447.50"></text></g><g><title>&lt;polars_parquet::arrow::read::deserialize::binview::BinViewDecoder as polars_parquet::arrow::read::deserialize::utils::Decoder&gt;::finalize (2 samples, 0.06%)</title><rect x="42.6181%" y="469" width="0.0598%" height="15" fill="rgb(219,179,1)" fg:x="1426" fg:w="2"/><text x="42.8681%" y="479.50"></text></g><g><title>polars_arrow::array::binview::mutable::_&lt;impl core::convert::From&lt;polars_arrow::array::binview::mutable::MutableBinaryViewArray&lt;T&gt;&gt; for polars_arrow::array::binview::BinaryViewArrayGeneric&lt;T&gt;&gt;::from (1 samples, 0.03%)</title><rect x="42.6479%" y="453" width="0.0299%" height="15" fill="rgb(238,219,53)" fg:x="1427" fg:w="1"/><text x="42.8979%" y="463.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="42.6479%" y="437" width="0.0299%" height="15" fill="rgb(232,167,36)" fg:x="1427" fg:w="1"/><text x="42.8979%" y="447.50"></text></g><g><title>_szone_free (3 samples, 0.09%)</title><rect x="42.6778%" y="469" width="0.0897%" height="15" fill="rgb(244,19,51)" fg:x="1428" fg:w="3"/><text x="42.9278%" y="479.50"></text></g><g><title>free_large (3 samples, 0.09%)</title><rect x="42.6778%" y="453" width="0.0897%" height="15" fill="rgb(224,6,22)" fg:x="1428" fg:w="3"/><text x="42.9278%" y="463.50"></text></g><g><title>madvise (3 samples, 0.09%)</title><rect x="42.6778%" y="437" width="0.0897%" height="15" fill="rgb(224,145,5)" fg:x="1428" fg:w="3"/><text x="42.9278%" y="447.50"></text></g><g><title>free_medium (1 samples, 0.03%)</title><rect x="42.7675%" y="469" width="0.0299%" height="15" fill="rgb(234,130,49)" fg:x="1431" fg:w="1"/><text x="43.0175%" y="479.50"></text></g><g><title>mvm_madvise_free_plat (1 samples, 0.03%)</title><rect x="42.7675%" y="453" width="0.0299%" height="15" fill="rgb(254,6,2)" fg:x="1431" fg:w="1"/><text x="43.0175%" y="463.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (1 samples, 0.03%)</title><rect x="42.7675%" y="437" width="0.0299%" height="15" fill="rgb(208,96,46)" fg:x="1431" fg:w="1"/><text x="43.0175%" y="447.50"></text></g><g><title>madvise (1 samples, 0.03%)</title><rect x="42.7675%" y="421" width="0.0299%" height="15" fill="rgb(239,3,39)" fg:x="1431" fg:w="1"/><text x="43.0175%" y="431.50"></text></g><g><title>polars_arrow::bitmap::builder::BitmapBuilder::with_capacity (1 samples, 0.03%)</title><rect x="42.7974%" y="469" width="0.0299%" height="15" fill="rgb(233,210,1)" fg:x="1432" fg:w="1"/><text x="43.0474%" y="479.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="42.7974%" y="453" width="0.0299%" height="15" fill="rgb(244,137,37)" fg:x="1432" fg:w="1"/><text x="43.0474%" y="463.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.03%)</title><rect x="42.7974%" y="437" width="0.0299%" height="15" fill="rgb(240,136,2)" fg:x="1432" fg:w="1"/><text x="43.0474%" y="447.50"></text></g><g><title>polars_arrow::bitmap::builder::BitmapBuilder::extend_constant_slow (1 samples, 0.03%)</title><rect x="42.8273%" y="453" width="0.0299%" height="15" fill="rgb(239,18,37)" fg:x="1433" fg:w="1"/><text x="43.0773%" y="463.50"></text></g><g><title>polars_arrow::bitmap::builder::BitmapBuilder::reserve_slow (1 samples, 0.03%)</title><rect x="42.8571%" y="453" width="0.0299%" height="15" fill="rgb(218,185,22)" fg:x="1434" fg:w="1"/><text x="43.1071%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="42.8571%" y="437" width="0.0299%" height="15" fill="rgb(225,218,4)" fg:x="1434" fg:w="1"/><text x="43.1071%" y="447.50"></text></g><g><title>polars_arrow::bitmap::builder::BitmapBuilder::extend_constant_slow (2 samples, 0.06%)</title><rect x="43.3353%" y="437" width="0.0598%" height="15" fill="rgb(230,182,32)" fg:x="1450" fg:w="2"/><text x="43.5853%" y="447.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="43.8733%" y="421" width="0.0299%" height="15" fill="rgb(242,56,43)" fg:x="1468" fg:w="1"/><text x="44.1233%" y="431.50"></text></g><g><title>polars_parquet::arrow::read::deserialize::utils::decode_page_validity (42 samples, 1.26%)</title><rect x="42.8273%" y="469" width="1.2552%" height="15" fill="rgb(233,99,24)" fg:x="1433" fg:w="42"/><text x="43.0773%" y="479.50"></text></g><g><title>polars_parquet::arrow::read::deserialize::utils::decode_hybrid_rle_into_bitmap (40 samples, 1.20%)</title><rect x="42.8870%" y="453" width="1.1955%" height="15" fill="rgb(234,209,42)" fg:x="1435" fg:w="40"/><text x="43.1370%" y="463.50"></text></g><g><title>polars_parquet::parquet::encoding::hybrid_rle::HybridRleDecoder::next_chunk (23 samples, 0.69%)</title><rect x="43.3951%" y="437" width="0.6874%" height="15" fill="rgb(227,7,12)" fg:x="1452" fg:w="23"/><text x="43.6451%" y="447.50"></text></g><g><title>_platform_memmove (6 samples, 0.18%)</title><rect x="43.9032%" y="421" width="0.1793%" height="15" fill="rgb(245,203,43)" fg:x="1469" fg:w="6"/><text x="44.1532%" y="431.50"></text></g><g><title>__bzero (120 samples, 3.59%)</title><rect x="44.0825%" y="453" width="3.5864%" height="15" fill="rgb(238,205,33)" fg:x="1475" fg:w="120"/><text x="44.3325%" y="463.50">__bz..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="47.6689%" y="453" width="0.0299%" height="15" fill="rgb(231,56,7)" fg:x="1595" fg:w="1"/><text x="47.9189%" y="463.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="47.6689%" y="437" width="0.0299%" height="15" fill="rgb(244,186,29)" fg:x="1595" fg:w="1"/><text x="47.9189%" y="447.50"></text></g><g><title>snap::decompress::Decoder::decompress (937 samples, 28.00%)</title><rect x="47.6987%" y="437" width="28.0036%" height="15" fill="rgb(234,111,31)" fg:x="1596" fg:w="937"/><text x="47.9487%" y="447.50">snap::decompress::Decoder::decompress</text></g><g><title>_platform_memmove (16 samples, 0.48%)</title><rect x="75.2241%" y="421" width="0.4782%" height="15" fill="rgb(241,149,10)" fg:x="2517" fg:w="16"/><text x="75.4741%" y="431.50"></text></g><g><title>polars_parquet::arrow::read::deserialize::utils::PageDecoder&lt;D&gt;::collect (2,015 samples, 60.22%)</title><rect x="15.5111%" y="485" width="60.2212%" height="15" fill="rgb(249,206,44)" fg:x="519" fg:w="2015"/><text x="15.7611%" y="495.50">polars_parquet::arrow::read::deserialize::utils::PageDecoder&lt;D&gt;::collect</text></g><g><title>polars_parquet::parquet::read::compression::decompress (1,059 samples, 31.65%)</title><rect x="44.0825%" y="469" width="31.6497%" height="15" fill="rgb(251,153,30)" fg:x="1475" fg:w="1059"/><text x="44.3325%" y="479.50">polars_parquet::parquet::read::compression::decompr..</text></g><g><title>polars_parquet::parquet::compression::decompress (938 samples, 28.03%)</title><rect x="47.6987%" y="453" width="28.0335%" height="15" fill="rgb(239,152,38)" fg:x="1596" fg:w="938"/><text x="47.9487%" y="463.50">polars_parquet::parquet::compression::decompr..</text></g><g><title>snap::decompress::decompress_len (1 samples, 0.03%)</title><rect x="75.7023%" y="437" width="0.0299%" height="15" fill="rgb(249,139,47)" fg:x="2533" fg:w="1"/><text x="75.9523%" y="447.50"></text></g><g><title>snap::bytes::read_varu64 (1 samples, 0.03%)</title><rect x="75.7023%" y="421" width="0.0299%" height="15" fill="rgb(244,64,35)" fg:x="2533" fg:w="1"/><text x="75.9523%" y="431.50"></text></g><g><title>__bzero (1 samples, 0.03%)</title><rect x="79.7370%" y="421" width="0.0299%" height="15" fill="rgb(216,46,15)" fg:x="2668" fg:w="1"/><text x="79.9870%" y="431.50"></text></g><g><title>polars_arrow::bitmap::bitmask::BitMask::nth_set_bit_idx (33 samples, 0.99%)</title><rect x="79.7669%" y="421" width="0.9863%" height="15" fill="rgb(250,74,19)" fg:x="2669" fg:w="33"/><text x="80.0169%" y="431.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.06%)</title><rect x="81.8589%" y="405" width="0.0598%" height="15" fill="rgb(249,42,33)" fg:x="2739" fg:w="2"/><text x="82.1089%" y="415.50"></text></g><g><title>polars_parquet::arrow::read::deserialize::dictionary_encoded::optional::decode (219 samples, 6.55%)</title><rect x="75.7322%" y="437" width="6.5451%" height="15" fill="rgb(242,149,17)" fg:x="2534" fg:w="219"/><text x="75.9822%" y="447.50">polars_pa..</text></g><g><title>polars_parquet::parquet::encoding::hybrid_rle::HybridRleDecoder::next_chunk (51 samples, 1.52%)</title><rect x="80.7531%" y="421" width="1.5242%" height="15" fill="rgb(244,29,21)" fg:x="2702" fg:w="51"/><text x="81.0031%" y="431.50"></text></g><g><title>_platform_memmove (12 samples, 0.36%)</title><rect x="81.9187%" y="405" width="0.3586%" height="15" fill="rgb(220,130,37)" fg:x="2741" fg:w="12"/><text x="82.1687%" y="415.50"></text></g><g><title>polars_parquet::arrow::read::deserialize::dictionary_encoded::required::decode (31 samples, 0.93%)</title><rect x="82.2773%" y="437" width="0.9265%" height="15" fill="rgb(211,67,2)" fg:x="2753" fg:w="31"/><text x="82.5273%" y="447.50"></text></g><g><title>polars_parquet::parquet::encoding::hybrid_rle::HybridRleDecoder::next_chunk (9 samples, 0.27%)</title><rect x="82.9348%" y="421" width="0.2690%" height="15" fill="rgb(235,68,52)" fg:x="2775" fg:w="9"/><text x="83.1848%" y="431.50"></text></g><g><title>_platform_memmove (3 samples, 0.09%)</title><rect x="83.1142%" y="405" width="0.0897%" height="15" fill="rgb(246,142,3)" fg:x="2781" fg:w="3"/><text x="83.3642%" y="415.50"></text></g><g><title>polars_parquet::arrow::read::deserialize::dictionary_encoded::decode_dict_dispatch (253 samples, 7.56%)</title><rect x="75.7322%" y="453" width="7.5613%" height="15" fill="rgb(241,25,7)" fg:x="2534" fg:w="253"/><text x="75.9822%" y="463.50">polars_par..</text></g><g><title>polars_parquet::parquet::encoding::hybrid_rle::HybridRleDecoder::next_chunk (3 samples, 0.09%)</title><rect x="83.2038%" y="437" width="0.0897%" height="15" fill="rgb(242,119,39)" fg:x="2784" fg:w="3"/><text x="83.4538%" y="447.50"></text></g><g><title>polars_parquet::arrow::read::deserialize::dictionary_encoded::append_validity (1 samples, 0.03%)</title><rect x="83.2935%" y="405" width="0.0299%" height="15" fill="rgb(241,98,45)" fg:x="2787" fg:w="1"/><text x="83.5435%" y="415.50"></text></g><g><title>polars_arrow::bitmap::builder::BitmapBuilder::extend_from_slice_unchecked (1 samples, 0.03%)</title><rect x="83.2935%" y="389" width="0.0299%" height="15" fill="rgb(254,28,30)" fg:x="2787" fg:w="1"/><text x="83.5435%" y="399.50"></text></g><g><title>polars_parquet::arrow::read::deserialize::primitive::plain::decode_optional (23 samples, 0.69%)</title><rect x="83.3234%" y="405" width="0.6874%" height="15" fill="rgb(241,142,54)" fg:x="2788" fg:w="23"/><text x="83.5734%" y="415.50"></text></g><g><title>__bzero (10 samples, 0.30%)</title><rect x="83.7119%" y="389" width="0.2989%" height="15" fill="rgb(222,85,15)" fg:x="2801" fg:w="10"/><text x="83.9619%" y="399.50"></text></g><g><title>&lt;polars_parquet::arrow::read::deserialize::primitive::integer::IntDecoder&lt;P,T,D&gt; as polars_parquet::arrow::read::deserialize::utils::Decoder&gt;::extend_filtered_with_state (337 samples, 10.07%)</title><rect x="75.7322%" y="469" width="10.0717%" height="15" fill="rgb(210,85,47)" fg:x="2534" fg:w="337"/><text x="75.9822%" y="479.50">&lt;polars_parquet..</text></g><g><title>polars_parquet::arrow::read::deserialize::primitive::plain::decode (84 samples, 2.51%)</title><rect x="83.2935%" y="453" width="2.5105%" height="15" fill="rgb(224,206,25)" fg:x="2787" fg:w="84"/><text x="83.5435%" y="463.50">po..</text></g><g><title>polars_parquet::arrow::read::deserialize::primitive::plain::decode_no_incompact_predicates (84 samples, 2.51%)</title><rect x="83.2935%" y="437" width="2.5105%" height="15" fill="rgb(243,201,19)" fg:x="2787" fg:w="84"/><text x="83.5435%" y="447.50">po..</text></g><g><title>polars_parquet::arrow::read::deserialize::primitive::plain::decode_aligned_bytes_dispatch (84 samples, 2.51%)</title><rect x="83.2935%" y="421" width="2.5105%" height="15" fill="rgb(236,59,4)" fg:x="2787" fg:w="84"/><text x="83.5435%" y="431.50">po..</text></g><g><title>polars_parquet::arrow::read::deserialize::primitive::plain::required::decode (60 samples, 1.79%)</title><rect x="84.0108%" y="405" width="1.7932%" height="15" fill="rgb(254,179,45)" fg:x="2811" fg:w="60"/><text x="84.2608%" y="415.50">p..</text></g><g><title>_platform_memmove (60 samples, 1.79%)</title><rect x="84.0108%" y="389" width="1.7932%" height="15" fill="rgb(226,14,10)" fg:x="2811" fg:w="60"/><text x="84.2608%" y="399.50">_..</text></g><g><title>&lt;polars_parquet::arrow::read::deserialize::primitive::integer::IntDecoder&lt;P,T,D&gt; as polars_parquet::arrow::read::deserialize::utils::Decoder&gt;::finalize (1 samples, 0.03%)</title><rect x="85.8039%" y="469" width="0.0299%" height="15" fill="rgb(244,27,41)" fg:x="2871" fg:w="1"/><text x="86.0539%" y="479.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (1 samples, 0.03%)</title><rect x="85.8039%" y="453" width="0.0299%" height="15" fill="rgb(235,35,32)" fg:x="2871" fg:w="1"/><text x="86.0539%" y="463.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (1 samples, 0.03%)</title><rect x="85.8039%" y="437" width="0.0299%" height="15" fill="rgb(218,68,31)" fg:x="2871" fg:w="1"/><text x="86.0539%" y="447.50"></text></g><g><title>free_tiny (1 samples, 0.03%)</title><rect x="85.8039%" y="421" width="0.0299%" height="15" fill="rgb(207,120,37)" fg:x="2871" fg:w="1"/><text x="86.0539%" y="431.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="85.8039%" y="405" width="0.0299%" height="15" fill="rgb(227,98,0)" fg:x="2871" fg:w="1"/><text x="86.0539%" y="415.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="85.8039%" y="389" width="0.0299%" height="15" fill="rgb(207,7,3)" fg:x="2871" fg:w="1"/><text x="86.0539%" y="399.50"></text></g><g><title>&lt;polars_parquet::parquet::read::compression::BasicDecompressor as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="85.8338%" y="469" width="0.0598%" height="15" fill="rgb(206,98,19)" fg:x="2872" fg:w="2"/><text x="86.0838%" y="479.50"></text></g><g><title>&lt;polars_parquet::parquet::read::page::reader::PageReader as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="85.8338%" y="453" width="0.0598%" height="15" fill="rgb(217,5,26)" fg:x="2872" fg:w="2"/><text x="86.0838%" y="463.50"></text></g><g><title>polars_parquet::parquet::read::page::reader::read_page_header (2 samples, 0.06%)</title><rect x="85.8338%" y="437" width="0.0598%" height="15" fill="rgb(235,190,38)" fg:x="2872" fg:w="2"/><text x="86.0838%" y="447.50"></text></g><g><title>&lt;polars_parquet_format::thrift::protocol::compact::TCompactInputProtocol&lt;R&gt; as polars_parquet_format::thrift::protocol::TInputProtocol&gt;::read_field_begin (1 samples, 0.03%)</title><rect x="85.8637%" y="421" width="0.0299%" height="15" fill="rgb(247,86,24)" fg:x="2873" fg:w="1"/><text x="86.1137%" y="431.50"></text></g><g><title>std::io::default_read_exact (1 samples, 0.03%)</title><rect x="85.8637%" y="405" width="0.0299%" height="15" fill="rgb(205,101,16)" fg:x="2873" fg:w="1"/><text x="86.1137%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;polars_parquet::parquet::read::compression::BasicDecompressor&gt; (2 samples, 0.06%)</title><rect x="85.8936%" y="469" width="0.0598%" height="15" fill="rgb(246,168,33)" fg:x="2874" fg:w="2"/><text x="86.1436%" y="479.50"></text></g><g><title>free_medium (1 samples, 0.03%)</title><rect x="85.9534%" y="469" width="0.0299%" height="15" fill="rgb(231,114,1)" fg:x="2876" fg:w="1"/><text x="86.2034%" y="479.50"></text></g><g><title>polars_arrow::bitmap::builder::BitmapBuilder::extend_constant_slow (2 samples, 0.06%)</title><rect x="85.9833%" y="453" width="0.0598%" height="15" fill="rgb(207,184,53)" fg:x="2877" fg:w="2"/><text x="86.2333%" y="463.50"></text></g><g><title>polars_arrow::bitmap::builder::BitmapBuilder::extend_constant_slow (4 samples, 0.12%)</title><rect x="86.9994%" y="437" width="0.1195%" height="15" fill="rgb(224,95,51)" fg:x="2911" fg:w="4"/><text x="87.2494%" y="447.50"></text></g><g><title>DYLD-STUB$$memcpy (5 samples, 0.15%)</title><rect x="87.7466%" y="421" width="0.1494%" height="15" fill="rgb(212,188,45)" fg:x="2936" fg:w="5"/><text x="87.9966%" y="431.50"></text></g><g><title>polars_parquet::arrow::read::deserialize::utils::decode_page_validity (68 samples, 2.03%)</title><rect x="85.9833%" y="469" width="2.0323%" height="15" fill="rgb(223,154,38)" fg:x="2877" fg:w="68"/><text x="86.2333%" y="479.50">p..</text></g><g><title>polars_parquet::arrow::read::deserialize::utils::decode_hybrid_rle_into_bitmap (66 samples, 1.97%)</title><rect x="86.0430%" y="453" width="1.9725%" height="15" fill="rgb(251,22,52)" fg:x="2879" fg:w="66"/><text x="86.2930%" y="463.50">p..</text></g><g><title>polars_parquet::parquet::encoding::hybrid_rle::HybridRleDecoder::next_chunk (30 samples, 0.90%)</title><rect x="87.1189%" y="437" width="0.8966%" height="15" fill="rgb(229,209,22)" fg:x="2915" fg:w="30"/><text x="87.3689%" y="447.50"></text></g><g><title>_platform_memmove (4 samples, 0.12%)</title><rect x="87.8960%" y="421" width="0.1195%" height="15" fill="rgb(234,138,34)" fg:x="2941" fg:w="4"/><text x="88.1460%" y="431.50"></text></g><g><title>__bzero (63 samples, 1.88%)</title><rect x="88.0454%" y="453" width="1.8828%" height="15" fill="rgb(212,95,11)" fg:x="2946" fg:w="63"/><text x="88.2954%" y="463.50">_..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="89.9283%" y="453" width="0.0299%" height="15" fill="rgb(240,179,47)" fg:x="3009" fg:w="1"/><text x="90.1783%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="89.9283%" y="437" width="0.0299%" height="15" fill="rgb(240,163,11)" fg:x="3009" fg:w="1"/><text x="90.1783%" y="447.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="89.9283%" y="421" width="0.0299%" height="15" fill="rgb(236,37,12)" fg:x="3009" fg:w="1"/><text x="90.1783%" y="431.50"></text></g><g><title>medium_malloc_should_clear (1 samples, 0.03%)</title><rect x="89.9283%" y="405" width="0.0299%" height="15" fill="rgb(232,164,16)" fg:x="3009" fg:w="1"/><text x="90.1783%" y="415.50"></text></g><g><title>medium_malloc_from_free_list (1 samples, 0.03%)</title><rect x="89.9283%" y="389" width="0.0299%" height="15" fill="rgb(244,205,15)" fg:x="3009" fg:w="1"/><text x="90.1783%" y="399.50"></text></g><g><title>polars_parquet::parquet::read::compression::decompress (280 samples, 8.37%)</title><rect x="88.0155%" y="469" width="8.3682%" height="15" fill="rgb(223,117,47)" fg:x="2945" fg:w="280"/><text x="88.2655%" y="479.50">polars_parqu..</text></g><g><title>polars_parquet::parquet::compression::decompress (215 samples, 6.43%)</title><rect x="89.9582%" y="453" width="6.4256%" height="15" fill="rgb(244,107,35)" fg:x="3010" fg:w="215"/><text x="90.2082%" y="463.50">polars_p..</text></g><g><title>snap::decompress::Decoder::decompress (215 samples, 6.43%)</title><rect x="89.9582%" y="437" width="6.4256%" height="15" fill="rgb(205,140,8)" fg:x="3010" fg:w="215"/><text x="90.2082%" y="447.50">snap::de..</text></g><g><title>_platform_memmove (50 samples, 1.49%)</title><rect x="94.8894%" y="421" width="1.4943%" height="15" fill="rgb(228,84,46)" fg:x="3175" fg:w="50"/><text x="95.1394%" y="431.50"></text></g><g><title>polars_parquet::arrow::read::deserialize::utils::PageDecoder&lt;D&gt;::collect_boxed (692 samples, 20.68%)</title><rect x="75.7322%" y="485" width="20.6814%" height="15" fill="rgb(254,188,9)" fg:x="2534" fg:w="692"/><text x="75.9822%" y="495.50">polars_parquet::arrow::read::dese..</text></g><g><title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="96.3837%" y="469" width="0.0299%" height="15" fill="rgb(206,112,54)" fg:x="3225" fg:w="1"/><text x="96.6337%" y="479.50"></text></g><g><title>medium_malloc_should_clear (1 samples, 0.03%)</title><rect x="96.3837%" y="453" width="0.0299%" height="15" fill="rgb(216,84,49)" fg:x="3225" fg:w="1"/><text x="96.6337%" y="463.50"></text></g><g><title>_os_unfair_lock_lock_slow (1 samples, 0.03%)</title><rect x="96.3837%" y="437" width="0.0299%" height="15" fill="rgb(214,194,35)" fg:x="3225" fg:w="1"/><text x="96.6337%" y="447.50"></text></g><g><title>polars_parquet::parquet::read::compression::decompress (1 samples, 0.03%)</title><rect x="96.4136%" y="453" width="0.0299%" height="15" fill="rgb(249,28,3)" fg:x="3226" fg:w="1"/><text x="96.6636%" y="463.50"></text></g><g><title>polars_parquet::parquet::compression::decompress (1 samples, 0.03%)</title><rect x="96.4136%" y="437" width="0.0299%" height="15" fill="rgb(222,56,52)" fg:x="3226" fg:w="1"/><text x="96.6636%" y="447.50"></text></g><g><title>snap::decompress::Decoder::decompress (1 samples, 0.03%)</title><rect x="96.4136%" y="421" width="0.0299%" height="15" fill="rgb(245,217,50)" fg:x="3226" fg:w="1"/><text x="96.6636%" y="431.50"></text></g><g><title>polars_io::parquet::read::mmap::to_deserializer (2,712 samples, 81.05%)</title><rect x="15.4513%" y="533" width="81.0520%" height="15" fill="rgb(213,201,24)" fg:x="517" fg:w="2712"/><text x="15.7013%" y="543.50">polars_io::parquet::read::mmap::to_deserializer</text></g><g><title>polars_parquet::arrow::read::deserialize::column_iter_to_arrays (2,710 samples, 80.99%)</title><rect x="15.5111%" y="517" width="80.9922%" height="15" fill="rgb(248,116,28)" fg:x="519" fg:w="2710"/><text x="15.7611%" y="527.50">polars_parquet::arrow::read::deserialize::column_iter_to_arrays</text></g><g><title>polars_parquet::arrow::read::deserialize::simple::page_iter_to_array (2,710 samples, 80.99%)</title><rect x="15.5111%" y="501" width="80.9922%" height="15" fill="rgb(219,72,43)" fg:x="519" fg:w="2710"/><text x="15.7611%" y="511.50">polars_parquet::arrow::read::deserialize::simple::page_iter_to_array</text></g><g><title>polars_parquet::arrow::read::deserialize::utils::PageDecoder&lt;D&gt;::new (3 samples, 0.09%)</title><rect x="96.4136%" y="485" width="0.0897%" height="15" fill="rgb(209,138,14)" fg:x="3226" fg:w="3"/><text x="96.6636%" y="495.50"></text></g><g><title>polars_parquet::parquet::read::compression::BasicDecompressor::read_dict_page (3 samples, 0.09%)</title><rect x="96.4136%" y="469" width="0.0897%" height="15" fill="rgb(222,18,33)" fg:x="3226" fg:w="3"/><text x="96.6636%" y="479.50"></text></g><g><title>polars_parquet::parquet::read::page::reader::PageReader::read_dict (2 samples, 0.06%)</title><rect x="96.4435%" y="453" width="0.0598%" height="15" fill="rgb(213,199,7)" fg:x="3227" fg:w="2"/><text x="96.6935%" y="463.50"></text></g><g><title>polars_parquet::parquet::read::page::reader::read_page_header (1 samples, 0.03%)</title><rect x="96.4734%" y="437" width="0.0299%" height="15" fill="rgb(250,110,10)" fg:x="3228" fg:w="1"/><text x="96.7234%" y="447.50"></text></g><g><title>&lt;polars_stream::async_executor::task::Task&lt;F,S,M&gt; as polars_stream::async_executor::task::DynTask&lt;M&gt;&gt;::run (2,720 samples, 81.29%)</title><rect x="15.2421%" y="581" width="81.2911%" height="15" fill="rgb(248,123,6)" fg:x="510" fg:w="2720"/><text x="15.4921%" y="591.50">&lt;polars_stream::async_executor::task::Task&lt;F,S,M&gt; as polars_stream::async_executor::task::DynTask&lt;M&gt;&gt;::run</text></g><g><title>polars_stream::nodes::io_sources::parquet::row_group_decode::RowGroupDecoder::row_group_data_to_df::_{{closure}} (2,719 samples, 81.26%)</title><rect x="15.2720%" y="565" width="81.2612%" height="15" fill="rgb(206,91,31)" fg:x="511" fg:w="2719"/><text x="15.5220%" y="575.50">polars_stream::nodes::io_sources::parquet::row_group_decode::RowGroupDecoder::row_group_data_to_df::_{{closure}}</text></g><g><title>polars_stream::nodes::io_sources::parquet::row_group_decode::decode_column (2,718 samples, 81.23%)</title><rect x="15.3019%" y="549" width="81.2313%" height="15" fill="rgb(211,154,13)" fg:x="512" fg:w="2718"/><text x="15.5519%" y="559.50">polars_stream::nodes::io_sources::parquet::row_group_decode::decode_column</text></g><g><title>polars_parquet::parquet::metadata::row_metadata::RowGroupMetadata::columns_under_root_iter (1 samples, 0.03%)</title><rect x="96.5033%" y="533" width="0.0299%" height="15" fill="rgb(225,148,7)" fg:x="3229" fg:w="1"/><text x="96.7533%" y="543.50"></text></g><g><title>polars_parquet::parquet::metadata::row_metadata::RowGroupMetadata::columns_under_root_iter (1 samples, 0.03%)</title><rect x="96.5033%" y="517" width="0.0299%" height="15" fill="rgb(220,160,43)" fg:x="3229" fg:w="1"/><text x="96.7533%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.03%)</title><rect x="96.5033%" y="501" width="0.0299%" height="15" fill="rgb(213,52,39)" fg:x="3229" fg:w="1"/><text x="96.7533%" y="511.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (2 samples, 0.06%)</title><rect x="96.5332%" y="581" width="0.0598%" height="15" fill="rgb(243,137,7)" fg:x="3230" fg:w="2"/><text x="96.7832%" y="591.50"></text></g><g><title>pthread_cond_signal (2 samples, 0.06%)</title><rect x="96.5332%" y="565" width="0.0598%" height="15" fill="rgb(230,79,13)" fg:x="3230" fg:w="2"/><text x="96.7832%" y="575.50"></text></g><g><title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="96.5332%" y="549" width="0.0598%" height="15" fill="rgb(247,105,23)" fg:x="3230" fg:w="2"/><text x="96.7832%" y="559.50"></text></g><g><title>polars_stream::async_executor::Executor::runner (2,724 samples, 81.41%)</title><rect x="15.2421%" y="597" width="81.4106%" height="15" fill="rgb(223,179,41)" fg:x="510" fg:w="2724"/><text x="15.4921%" y="607.50">polars_stream::async_executor::Executor::runner</text></g><g><title>polars_stream::async_executor::park_group::ParkAttempt::park_slow (2 samples, 0.06%)</title><rect x="96.5929%" y="581" width="0.0598%" height="15" fill="rgb(218,9,34)" fg:x="3232" fg:w="2"/><text x="96.8429%" y="591.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.06%)</title><rect x="96.5929%" y="565" width="0.0598%" height="15" fill="rgb(222,106,8)" fg:x="3232" fg:w="2"/><text x="96.8429%" y="575.50"></text></g><g><title>_pthread_cond_wait (2 samples, 0.06%)</title><rect x="96.5929%" y="549" width="0.0598%" height="15" fill="rgb(211,220,0)" fg:x="3232" fg:w="2"/><text x="96.8429%" y="559.50"></text></g><g><title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="96.5929%" y="533" width="0.0598%" height="15" fill="rgb(229,52,16)" fg:x="3232" fg:w="2"/><text x="96.8429%" y="543.50"></text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (6 samples, 0.18%)</title><rect x="96.6527%" y="565" width="0.1793%" height="15" fill="rgb(212,155,18)" fg:x="3234" fg:w="6"/><text x="96.9027%" y="575.50"></text></g><g><title>rayon_core::registry::Registry::catch_unwind (6 samples, 0.18%)</title><rect x="96.6527%" y="549" width="0.1793%" height="15" fill="rgb(242,21,14)" fg:x="3234" fg:w="6"/><text x="96.9027%" y="559.50"></text></g><g><title>__munmap (6 samples, 0.18%)</title><rect x="96.6527%" y="533" width="0.1793%" height="15" fill="rgb(222,19,48)" fg:x="3234" fg:w="6"/><text x="96.9027%" y="543.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (8 samples, 0.24%)</title><rect x="96.6527%" y="597" width="0.2391%" height="15" fill="rgb(232,45,27)" fg:x="3234" fg:w="8"/><text x="96.9027%" y="607.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (8 samples, 0.24%)</title><rect x="96.6527%" y="581" width="0.2391%" height="15" fill="rgb(249,103,42)" fg:x="3234" fg:w="8"/><text x="96.9027%" y="591.50"></text></g><g><title>cthread_yield (2 samples, 0.06%)</title><rect x="96.8320%" y="565" width="0.0598%" height="15" fill="rgb(246,81,33)" fg:x="3240" fg:w="2"/><text x="97.0820%" y="575.50"></text></g><g><title>swtch_pri (2 samples, 0.06%)</title><rect x="96.8320%" y="549" width="0.0598%" height="15" fill="rgb(252,33,42)" fg:x="3240" fg:w="2"/><text x="97.0820%" y="559.50"></text></g><g><title>&lt;polars_stream::nodes::in_memory_sink::InMemorySinkNode as polars_stream::nodes::ComputeNode&gt;::get_output (1 samples, 0.03%)</title><rect x="96.8918%" y="501" width="0.0299%" height="15" fill="rgb(209,212,41)" fg:x="3242" fg:w="1"/><text x="97.1418%" y="511.50"></text></g><g><title>polars_core::utils::accumulate_dataframes_vertical_unchecked (1 samples, 0.03%)</title><rect x="96.8918%" y="485" width="0.0299%" height="15" fill="rgb(207,154,6)" fg:x="3242" fg:w="1"/><text x="97.1418%" y="495.50"></text></g><g><title>polars_core::frame::DataFrame::vstack_mut_owned_unchecked (1 samples, 0.03%)</title><rect x="96.8918%" y="469" width="0.0299%" height="15" fill="rgb(223,64,47)" fg:x="3242" fg:w="1"/><text x="97.1418%" y="479.50"></text></g><g><title>polars_core::series::Series::append_owned (1 samples, 0.03%)</title><rect x="96.8918%" y="453" width="0.0299%" height="15" fill="rgb(211,161,38)" fg:x="3242" fg:w="1"/><text x="97.1418%" y="463.50"></text></g><g><title>&lt;polars_core::series::implementations::SeriesWrap&lt;polars_core::chunked_array::ChunkedArray&lt;polars_core::datatypes::Int32Type&gt;&gt; as polars_core::series::series_trait::SeriesTrait&gt;::append_owned (1 samples, 0.03%)</title><rect x="96.8918%" y="437" width="0.0299%" height="15" fill="rgb(219,138,40)" fg:x="3242" fg:w="1"/><text x="97.1418%" y="447.50"></text></g><g><title>polars_core::series::Series::take_inner (1 samples, 0.03%)</title><rect x="96.8918%" y="421" width="0.0299%" height="15" fill="rgb(241,228,46)" fg:x="3242" fg:w="1"/><text x="97.1418%" y="431.50"></text></g><g><title>_nanov2_free (1 samples, 0.03%)</title><rect x="96.8918%" y="405" width="0.0299%" height="15" fill="rgb(223,209,38)" fg:x="3242" fg:w="1"/><text x="97.1418%" y="415.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.06%)</title><rect x="96.8918%" y="565" width="0.0598%" height="15" fill="rgb(236,164,45)" fg:x="3242" fg:w="2"/><text x="97.1418%" y="575.50"></text></g><g><title>&lt;polars_mem_engine::executors::cache::CacheExec as polars_mem_engine::executors::executor::Executor&gt;::execute (2 samples, 0.06%)</title><rect x="96.8918%" y="549" width="0.0598%" height="15" fill="rgb(231,15,5)" fg:x="3242" fg:w="2"/><text x="97.1418%" y="559.50"></text></g><g><title>&lt;polars_lazy::frame::streaming_dispatch::StreamingQueryExecutor as polars_mem_engine::executors::executor::Executor&gt;::execute (2 samples, 0.06%)</title><rect x="96.8918%" y="533" width="0.0598%" height="15" fill="rgb(252,35,15)" fg:x="3242" fg:w="2"/><text x="97.1418%" y="543.50"></text></g><g><title>polars_stream::skeleton::StreamingQuery::execute (2 samples, 0.06%)</title><rect x="96.8918%" y="517" width="0.0598%" height="15" fill="rgb(248,181,18)" fg:x="3242" fg:w="2"/><text x="97.1418%" y="527.50"></text></g><g><title>polars_stream::graph::Graph::update_all_states (1 samples, 0.03%)</title><rect x="96.9217%" y="501" width="0.0299%" height="15" fill="rgb(233,39,42)" fg:x="3243" fg:w="1"/><text x="97.1717%" y="511.50"></text></g><g><title>&lt;polars_stream::nodes::io_sources::multi_file_reader::MultiFileReader as polars_stream::nodes::ComputeNode&gt;::update_state (1 samples, 0.03%)</title><rect x="96.9217%" y="485" width="0.0299%" height="15" fill="rgb(238,110,33)" fg:x="3243" fg:w="1"/><text x="97.1717%" y="495.50"></text></g><g><title>polars_stream::async_executor::task_scope (1 samples, 0.03%)</title><rect x="96.9217%" y="469" width="0.0299%" height="15" fill="rgb(233,195,10)" fg:x="3243" fg:w="1"/><text x="97.1717%" y="479.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (1 samples, 0.03%)</title><rect x="96.9217%" y="453" width="0.0299%" height="15" fill="rgb(254,105,3)" fg:x="3243" fg:w="1"/><text x="97.1717%" y="463.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 0.03%)</title><rect x="96.9217%" y="437" width="0.0299%" height="15" fill="rgb(221,225,9)" fg:x="3243" fg:w="1"/><text x="97.1717%" y="447.50"></text></g><g><title>&lt;polars_stream::async_executor::task::Task&lt;F,S,M&gt; as polars_stream::async_executor::task::Joinable&lt;&lt;F as core::future::future::Future&gt;::Output&gt;&gt;::poll_join (1 samples, 0.03%)</title><rect x="96.9217%" y="421" width="0.0299%" height="15" fill="rgb(224,227,45)" fg:x="3243" fg:w="1"/><text x="97.1717%" y="431.50"></text></g><g><title>atomic_waker::AtomicWaker::register (1 samples, 0.03%)</title><rect x="96.9217%" y="405" width="0.0299%" height="15" fill="rgb(229,198,43)" fg:x="3243" fg:w="1"/><text x="97.1717%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.03%)</title><rect x="96.9516%" y="485" width="0.0299%" height="15" fill="rgb(206,209,35)" fg:x="3244" fg:w="1"/><text x="97.2016%" y="495.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (1 samples, 0.03%)</title><rect x="96.9516%" y="469" width="0.0299%" height="15" fill="rgb(245,195,53)" fg:x="3244" fg:w="1"/><text x="97.2016%" y="479.50"></text></g><g><title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="96.9516%" y="453" width="0.0299%" height="15" fill="rgb(240,92,26)" fg:x="3244" fg:w="1"/><text x="97.2016%" y="463.50"></text></g><g><title>pthread_testcancel (1 samples, 0.03%)</title><rect x="96.9516%" y="437" width="0.0299%" height="15" fill="rgb(207,40,23)" fg:x="3244" fg:w="1"/><text x="97.2016%" y="447.50"></text></g><g><title>polars_stream::nodes::io_sources::parquet::init::_&lt;impl polars_stream::nodes::io_sources::parquet::ParquetReadImpl&gt;::init_morsel_distributor::_{{closure}} (1 samples, 0.03%)</title><rect x="96.9815%" y="437" width="0.0299%" height="15" fill="rgb(223,111,35)" fg:x="3245" fg:w="1"/><text x="97.2315%" y="447.50"></text></g><g><title>&lt;polars_stream::async_executor::task::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="96.9815%" y="421" width="0.0299%" height="15" fill="rgb(229,147,28)" fg:x="3245" fg:w="1"/><text x="97.2315%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="96.9815%" y="405" width="0.0299%" height="15" fill="rgb(211,29,28)" fg:x="3245" fg:w="1"/><text x="97.2315%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;polars_stream::async_executor::task::Task&lt;polars_stream::nodes::io_sources::parquet::init::&lt;impl polars_stream::nodes::io_sources::parquet::ParquetReadImpl&gt;::init_morsel_distributor::{{closure}},polars_stream::async_executor::spawn&lt;polars_stream::nodes::io_sources::parquet::init::&lt;impl polars_stream::nodes::io_sources::parquet::ParquetReadImpl&gt;::init_morsel_distributor::{{closure}}&gt;::{{closure}},polars_stream::async_executor::TaskMetadata&gt;&gt; (1 samples, 0.03%)</title><rect x="96.9815%" y="389" width="0.0299%" height="15" fill="rgb(228,72,33)" fg:x="3245" fg:w="1"/><text x="97.2315%" y="399.50"></text></g><g><title>&lt;polars_stream::async_executor::TaskMetadata as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="96.9815%" y="373" width="0.0299%" height="15" fill="rgb(205,214,31)" fg:x="3245" fg:w="1"/><text x="97.2315%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.03%)</title><rect x="96.9815%" y="357" width="0.0299%" height="15" fill="rgb(224,111,15)" fg:x="3245" fg:w="1"/><text x="97.2315%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="96.9815%" y="341" width="0.0299%" height="15" fill="rgb(253,21,26)" fg:x="3245" fg:w="1"/><text x="97.2315%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="96.9815%" y="325" width="0.0299%" height="15" fill="rgb(245,139,43)" fg:x="3245" fg:w="1"/><text x="97.2315%" y="335.50"></text></g><g><title>all (3,346 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(252,170,7)" fg:x="0" fg:w="3346"/><text x="0.2500%" y="703.50"></text></g><g><title>thread_start (2,836 samples, 84.76%)</title><rect x="15.2421%" y="677" width="84.7579%" height="15" fill="rgb(231,118,14)" fg:x="510" fg:w="2836"/><text x="15.4921%" y="687.50">thread_start</text></g><g><title>_pthread_start (2,836 samples, 84.76%)</title><rect x="15.2421%" y="661" width="84.7579%" height="15" fill="rgb(238,83,0)" fg:x="510" fg:w="2836"/><text x="15.4921%" y="671.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (2,836 samples, 84.76%)</title><rect x="15.2421%" y="645" width="84.7579%" height="15" fill="rgb(221,39,39)" fg:x="510" fg:w="2836"/><text x="15.4921%" y="655.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2,836 samples, 84.76%)</title><rect x="15.2421%" y="629" width="84.7579%" height="15" fill="rgb(222,119,46)" fg:x="510" fg:w="2836"/><text x="15.4921%" y="639.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,836 samples, 84.76%)</title><rect x="15.2421%" y="613" width="84.7579%" height="15" fill="rgb(222,165,49)" fg:x="510" fg:w="2836"/><text x="15.4921%" y="623.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (104 samples, 3.11%)</title><rect x="96.8918%" y="597" width="3.1082%" height="15" fill="rgb(219,113,52)" fg:x="3242" fg:w="104"/><text x="97.1418%" y="607.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (104 samples, 3.11%)</title><rect x="96.8918%" y="581" width="3.1082%" height="15" fill="rgb(214,7,15)" fg:x="3242" fg:w="104"/><text x="97.1418%" y="591.50">tok..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (102 samples, 3.05%)</title><rect x="96.9516%" y="565" width="3.0484%" height="15" fill="rgb(235,32,4)" fg:x="3244" fg:w="102"/><text x="97.2016%" y="575.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (102 samples, 3.05%)</title><rect x="96.9516%" y="549" width="3.0484%" height="15" fill="rgb(238,90,54)" fg:x="3244" fg:w="102"/><text x="97.2016%" y="559.50">tok..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (102 samples, 3.05%)</title><rect x="96.9516%" y="533" width="3.0484%" height="15" fill="rgb(213,208,19)" fg:x="3244" fg:w="102"/><text x="97.2016%" y="543.50">tok..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (102 samples, 3.05%)</title><rect x="96.9516%" y="517" width="3.0484%" height="15" fill="rgb(233,156,4)" fg:x="3244" fg:w="102"/><text x="97.2016%" y="527.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (102 samples, 3.05%)</title><rect x="96.9516%" y="501" width="3.0484%" height="15" fill="rgb(207,194,5)" fg:x="3244" fg:w="102"/><text x="97.2016%" y="511.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (101 samples, 3.02%)</title><rect x="96.9815%" y="485" width="3.0185%" height="15" fill="rgb(206,111,30)" fg:x="3245" fg:w="101"/><text x="97.2315%" y="495.50">tok..</text></g><g><title>tokio::runtime::task::raw::poll (101 samples, 3.02%)</title><rect x="96.9815%" y="469" width="3.0185%" height="15" fill="rgb(243,70,54)" fg:x="3245" fg:w="101"/><text x="97.2315%" y="479.50">tok..</text></g><g><title>&lt;deduplicated_symbol&gt; (101 samples, 3.02%)</title><rect x="96.9815%" y="453" width="3.0185%" height="15" fill="rgb(242,28,8)" fg:x="3245" fg:w="101"/><text x="97.2315%" y="463.50">&lt;de..</text></g><g><title>polars_stream::nodes::io_sources::parquet::row_group_data_fetch::RowGroupDataFetcher::next::_{{closure}}::_{{closure}} (100 samples, 2.99%)</title><rect x="97.0114%" y="437" width="2.9886%" height="15" fill="rgb(219,106,18)" fg:x="3246" fg:w="100"/><text x="97.2614%" y="447.50">pol..</text></g><g><title>polars_utils::mem::prefetch::madvise (100 samples, 2.99%)</title><rect x="97.0114%" y="421" width="2.9886%" height="15" fill="rgb(244,222,10)" fg:x="3246" fg:w="100"/><text x="97.2614%" y="431.50">pol..</text></g><g><title>madvise (100 samples, 2.99%)</title><rect x="97.0114%" y="405" width="2.9886%" height="15" fill="rgb(236,179,52)" fg:x="3246" fg:w="100"/><text x="97.2614%" y="415.50">mad..</text></g></svg></svg>